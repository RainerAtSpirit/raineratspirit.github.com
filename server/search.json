[
{
"title" : "Durandal SP3: Developing SharePoint SPAs made easy",
"url" : "/2013/04/08/durandal-sp3-developing-sharepoint-spas-made-easy","date" :
"08 Apr 2013",
"content" : "Hi there,In the last post I introduced you to Durandal a SPA Framework, which can be used to create SPAs on top of the SharePoint infrastructure. This time we&#8217;re going to leverage Marc Anderson&#8217;s SPServices as a data service for our SPA.The obvious advantage is that web services are around for a long time, so one SPA (same code base) runs in SharePoint (2003), 2007, 2010 and 2013.The obvious disadvantage is that web services are deprecated in 2013, so they might go away with the next major release. If you are already running on 2010/2013 and don&#8217;t have to support older browser versions you might want looking into using REST services with JayData or Breeze instead&#8230; but that&#8217;s worth another story.Seeing is believing so here a couple of screen shots using IE versions that roughly matches the SP release time.SharePoint 2013 | IE 10:SharePoint 2010 | IE 8:SharePoint 2007 | IE 7:In SP2007 you&#8217;ll notice some issues with the CSS that is used in the SPA otherwise it&#8217;s fully functional. That is less an issue with IE7, but more with SP2007 that is running pages in Quirks mode. A quick workaround would be to apply a DOCTYPE to the pages that host your SPA.SharePoint 2003 | IE 6:Sorry, I&#8217;m out of historic SharePoint VMs. Please give me a shot if somebody has still access to a SP2003 environment. I&#8217;d love to add the missing screen shot.Now, after hopefully getting you excited, here&#8217;s the bad news. The demo is using the alpha release 2013.01ALPHA5 of SPServices, so I won&#8217;t make the demo code available through Github as usual. I&#8217;ll update this post once the next official version of SPServices has been released and tested with Durandal SP3.Update 2013/06/04: And here&#8217;s the link to the github repoThe good news is that there are two public available pages that allows you to go hands-on. Both are best viewed with your favorite console open.development version:optimized build:Without going into the details lets see what the Promises demo app is doing when you activate the list route (/#lists).Retrieve information about the lists in the current site via SPServices GetListCollection method (with caching)Retrieve detail information about the selected list via SPServices GetList method and build a mapping that can be used in SPServices SPXmlToJson method (with caching)Retrieve item information via SPServices GetListItems (NO caching)Update 2013/04/11: The live demo was updated based on some feedback I got. The list overview now produces a configurable row view of lists with meta information like ItemCount and Last Modified. Step 2 and 3 are performed once you select a list.By opening up the optimized build and filtering the network tab for XHR you can see the three POST requests to lists.asmx nicely lined up. Once you start selecting other lists, you&#8217;ll noticed that the number of XHR requests decrease as more and more cached information becomes available.The development version on the other side shows far more details via the console. That allows you to get familiar with Durandal&#8217;s application life cycle and to inspect the Json result of some spdata methods.After reading so far and hopefully seen the Promises demo in action by yourself, I hope that you share my excitement of the upcoming promise support in SPServices. Once it&#8217;s part of an official release SPServices will become a perfect fit for Durandal&#8217;s life cycle methods.Update 2013/04/16 Marc Anderson reposted this article as SPServices story and added a bunch of additional, valuable information. Do not miss to check it out."},
{
"title" : "Durandal meets SharePoint 2013",
"url" : "/2013/02/21/durandal-meets-sharepoint-2013","date" :
"21 Feb 2013",
"content" : "One of the benefits of the new SharePoint 2013 app model is that we are nowadays allowed to live on the cutting edge of technology. At least if you build Autohosted or Providerhosted apps. If that what you&#8217;re doing make sure to read Scott&#8217;s Announcing release of ASP.NET and Web Tools 2012.2 Update, install the bits and then explore some of the new MVC4 templates.Next step would be to look at Ananu&#8217;s blog aanuwizard as it has step-by-step instructions for you how to add a MVC4 project to your SharePoint 2013 apps.But how can you survive building single page application (SPA) in SharePoint if you arestill running on SharePoint 2010 orcreating SharePoint-hosted SharePoint 2013 appsLet me introduce you to Durandal, a pretty young SPA framework, which is named after a famous French sword. As it states on the web siteYour search for a SPA framework ends here.Durandal claims to be comfortableWe didn&#8217;t try to re-invent the wheel. Durandal is built on libs you know and love like jQuery, Knockout and RequireJS. There&#8217;s little to learn and building apps feels comfortable and familiar. Dive in and enjoy.Durandal claims to run Anyone and EveryoneIn the end, Durandal is just a collection of JavaScript libraries, so you don&#8217;t need anything special to use it. Hop on over to our github repo and fork away. You can just grab the contents of the App folder and use it to kickstart your own project.Alright let&#8217;s test these statements by throwing Durandal into a SharePoint-hosted SharePoint 2013 app and see how it goes.Before we start here&#8217;s a screen shot of the final result as teaser. There&#8217;s an online version as well and the VS template can be forked from github.We are starting by opening up the MVC4 Durandal starter template and creating an OOTB SharePoint 2013 app of type SharePoint-hosted. Files in the MVC Content and Script folder can be copied straight away, because there are already corresponded modules in the SP template. Create a new module named App, copy all App files from MVC4 app and make sure to exclude App/Durandal/amd/optimizer.exe from the project. By default SP won&#8217;t allow upload of .exe files. Do NOT delete that file, we&#8217;ll need it later.In the next step we&#8217;re copying the necessary bits from Index.cshtml and _splash.cshtml into our Default.aspx and adjust them to the aspx syntax.In order to substitute the MVC4 BundleConfig settings for CSS and JavaScript files you must have Web Essentials 2012 installed. If not, this is a good time to install it otherwise the next step won&#8217;t work. Hit F5, wait till the upload has finished and you should see something similar like this.Not that bad for a first stab I&#8217;d say, you&#8217;ve reached Durandal&#8217;s development mode. All AMD files will be served individually and in addition we are getting a whole amount of logging messages in the console. That&#8217;s the place where later down the road you&#8217;d spend most of your time, so make yourself familiar. Today we simply heading forward to production, but before we do that let&#8217;s make a small adjustment to Durandal&#8217;s navigation bar because at the moment it&#8217;s overlaying the default SharePoint top nav. If you are already familiar with Durandal&#8217;s app structure the next two steps are obvious. If not here are some readings that get you started:Durandal docsJohn PapaStephen WalterIn order to address the positioning of the navbar remove the navbar-fixed-top class in views/shell.html.And now a scary moment. Let&#8217;s create an optimized version of our app by going down to a command line and run optimizer.exe. Remember, that was the file that we excluded earlier in the process from our project, but of course it&#8217;s still sitting in the file system. As long as you stick with Durandal&#8217;s defaults this tool will help you creating an optimized main-built.js file.In the last step comment|uncomment the appropriate parts in default.aspx that are responsible for loading main-build.js and you should be good to go.Looks like we accomplished our mission for today and from my first impressions I&#8217;d say that Durandal can fulfill the promise of Your search for a SPA framework ends here. In one of the upcoming posts I&#8217;ll add my trusted data access tool JayData that allows us to work with native SharePoint list and libraries through OData and see how it fits into the Durandal SPA framework.Here&#8217;s a final word of warning. Before diving deeper into this new and mighty thing called Durandal, remember it&#8217;s young. So weigh the risks and don&#8217;t miss to dig up the story of Durandal&#8217;s eponym. You&#8217;ll see that at the end the hero Roland is dead, only the sword survived ;-)."},
{
"title" : "More about REST in SharePoint 2010/2013",
"url" : "/2013/01/19/more-about-rest-in-sharepoint","date" :
"19 Jan 2013",
"content" : "Hi there,It&#8217;s been a while since the last post about SharePoint 2013 and why you should use REST when talking to it. I&#8217;m still convinced that this holds true in the long run, but you should be aware of a couple of facts that I&#8217;ve learned in the meantime.At the time of this writing SharePoint 2013 only supports OData V2. How comes? During beta phase I got the impression that /_api acts as an OData V3 provider, but in the release version Microsoft pulled the plug and removed $metadata support. You can read more about that in this thread, but here&#8217;s the relevant paragraph from the specs.OData services MUST expose a Metadata Document which defines all data exposed by the service. The Metadata Document URL SHOULD be the root URL of the service with &#8220;/$metadata&#8221; appended. To retrieve this document a client issues a GET request to the Metadata Document URL.If you read a MUST in the specs you know that without it (whatever else your service delivers) it&#8217;s definitively not an OData v3 provider. What makes that so disappointing is that JayData won&#8217;t work without having the $metadata information exposed to it.If you&#8217;re like me and want to give JayData a try for abstracting the access to the underlying data provider, you should be aware of another limiting factor. Like jQuery 2.0 that was just announced, JayData is targeted to work with modern (mobile) browser. IE8 and below definitively doesn&#8217;t belong into that group and for JayData there&#8217;s no way to shim the missing required capabilities in.Not a big deal you say, IE8 is outdated anyway and nobody in my org is using it any longer. Lucky you, go ahead and give the OData v2/JayData combo a try. If on the other hand you want to create an app and put it in the app store&#8230;Guess what one of the MUST have criteria is that allows it to be placed in the app store is? You guessed right IE8 support! Read more about this requirement and some other pitfalls you might encounter in this post by Aidan Garnish.Hopefully Microsoft will deliver two things in the near future:1. provide $metadata for _api -&gt; this will make _api a real OData v3 provider2. lift the requirements for the app store. Come on guys IE8 is outdated and you&#8217;ve already got two newer releases out there!but regardless if Microsoft will fulfill my small wish list or not, luckily you can get JayData running on SharePoint 2010 and SharePoint 2013 by using _vti_bin/listdata.svc as of today.Update:: As Thomas pointed out since the Feb. 5th update to the validation policies IE8 is no longer a requirement for SharePoint app.In order to get you started here are links to two example sites that will allow you to get hands-on. Both require that you know your way around in a browser console :), so pick up your favorite one and give it a try.JavaScript language query playgroundThis is a live version of the JSLQ101 document that will allow you to work with a public OData v2 endpoint using JayData. Note that everything that you can do with the public OData v2 endpoint can be done using _vti_bin/listdata.svc in SharePoint 2010/2013.JSQL SharePoint 2013 appUserName: odatademo@spirit2013preview.onmicrosoft.comPassword: OData!Demo This is a SharePoint-hosted app that allows you to use CRUD operation against the app web. The list structure is described in more detail by Chris O&#8217;Brien and consists of a simple project list and a custom time tracking list that has a lookup to the project list. Make yourself familiar with this setup by reading this post from Chris.Note even if this is an SharePoint hosted app running on SharePoint 2013, because it&#8217;s using _vti_bin/listdata.svc this would work on SP2010 as well."},
{
"title" : "SharePoint 2013 apps: CSOM vs. REST?",
"url" : "/2012/10/05/sharepoint-2013-apps-csom-vs-rest","date" :
"05 Oct 2012",
"content" : "Hi there,Have your seen Microsoft&#8217;s TypeScript preview already? Are you curious how that will help you building SharePoint 2013 apps? Eager to get your hands dirty? So the good news is that by simply following the steps outlined in the last blog, this time using the TypeScript ToDoMVC example as your a la carte selection, you will be up and running in minutes.Great starting point, but what&#8217;s next? How can we access data that is stored inside SharePoint? No server side code is allowed in the app model, so your options are CSOM or REST. Which one is the better approach? Does the type of App you build has an influence? Just to recap you can choose between SharePoint-hosted, Autohosted and Provider-hosted. Other than the typical consultant answer it depends ;-) here are some reasons why I&#8217;m always using REST.On the server side:SharePoint 2010 already provides listdata.svc (OData v2) -&gt; Start building list-based CRUD solutions todaySharePoint 2013 adds the new OData v3 _api endpoint -&gt; Function support in OData v3 allows Microsoft to expose the whole range of CSOM functionality via RESTYou can control access to external OData services by using Business Connectivity ServicesVS2012 makes it easier than ever to produce OData v2/v3 services based on your own data sourcesLightSwitch eases the creation of server side mash-ups and expose them via ODataOData ecosystem provides access to data outside of the SharePoint contextEarlier this year Microsoft announced that OData becomes an OASIS StandardOn the client side:HTML5/JavaScript apps are extremely popular nowadays and languages that compile into JavaScript like CoffeeScript and TypeScript help to transition from server side languages to JavaScriptCoffeeScript is to Ruby as TypeScript is to Java/C#/C++.Luke Hoban (co-creator of TypeScript)SPAs are the perfect fit for mobile applicationClient side libraries like data.js or jaydata.js provide an abstraction layer for OData, so you don&#8217;t have to deal with the OData URI Conventions on your own.So at the end of the day you learn OData and a couple of client side app pattern once, and then you can reuse this knowledge over and over again&#8230; even outside of SharePoint.With that said, we still need to figure out how to access data that is stored in SharePoint from our remote hosted web, don&#8217;t we?The following drawing summarizes what&#8217;s going on when you run an Autohosted or Provider-hosted app.You end up with three places where data can be stored.In the remote webIn the app webIn the host webIn a client-only application direct accessing data in the app web (2.) and host web (3.) from your remote app (1.) is prohibited by cross-site-script restrictions. That where Microsoft&#8217;s SP.RequestExecutor.js library comes into play. As you can see in the drawing under the hood the system creates an IFrame in the remote web to a specific page in the app/host web (AppWebProxy.aspx), so in effect you&#8217;re &#8220;remote call&#8221; is a local call that tunnels through the IFrame to the remote site.Accessing data in the host web is further secured by OAuth, so in order to access information in the host web your application has to be configured correctly using the AppManifest.xml file. Last but not least you are allowed to configure the App authorization policy type e.g. if you app needs elevated privileges.In the default App for SharePoint 2013 Autohosted and Provider-hosted templates, Microsoft provides the Tokenhelper.cs file to deal with the whole App authentication and authorization process. Good news is, you don&#8217;t even have to deal with that if you are creating a client side only app. Once you&#8217;ve access to the app web you can use the SP.AppContextSite(@hostweb)/ _api function to access information from the host web. SP.AppContextSite() will then ensure that you are accessing the host data in compliance to the permissions you&#8217;ve configured.Here&#8217;s some minimalistic code that retrieves information from the app web and the host web and logs title and url on success. 1 function execCrossDomainRequest() { 2     // executor: The RequestExecutor object 3     // Initialize the RequestExecutor with the app web URL. 4     var executor = new SP.RequestExecutor(appweburl); 5  6     // Retrieve information from the app web 7     executor.executeAsync( 8       { 9           url:10               appweburl +11               &quot;/_api/web&quot;,12           method: &quot;GET&quot;,13           headers: { &quot;Accept&quot;: &quot;application/json; odata=verbose&quot; },14           success: successHandler,15           error: errorHandler16       }17     );18 19     // Retrieve information from the host web20     executor.executeAsync(21         {22             url:23                 appweburl +24                 &quot;/_api/SP.AppContextSite(@hostweb)/web/?@hostweb=&#39;&quot; + hostweburl + &quot;&#39;&quot;,25             method: &quot;GET&quot;,26             headers: { &quot;Accept&quot;: &quot;application/json; odata=verbose&quot; },27             success: successHandler,28             error: errorHandler29         }30     );31 }32 33 function successHandler(data) {34     var result = JSON.parse(data.body).d;35     console.log(&#39;Title: &#39; + result.Title + &#39; Url: &#39; + result.Url);36 }Trying to run this code using an OOTB template won&#8217;t work and the various error messages you might see can be tracked down to the fact that the appweburl is undefined.How comes? By default the Autohosted or Provider-hosted template have an empty app web. If the app web is empty SharePoint doesn&#8217;t create the app web for you. But as you can see in the diagram above without an app web, there&#8217;s no way to retrieve information for a client side solution. An NO, replacing appweburl through hostweburlto bypass the app web completely like in the following code example won&#8217;t work.Instead the system returns the following error message.How to mitigate? The solution is as simple as adding an Empty Element to the app web. This will force SharePoint to create the app web and you&#8217;ve got your missing stepping stone into the host web.Mission accomplished and for those of you who made it till the end here&#8217;s the link for today&#8217;s github repro."},
{
"title" : "MV* SharePoint 2013 Apps a la carte",
"url" : "/2012/09/08/mv-sharepoint-2013-apps-a-la-carte","date" :
"08 Sep 2012",
"content" : "Hey there,Welcome to our small SharePoint App restaurant, where we serve the best client side MV* crossover SharePoint apps worldwide. So what make us so special and what do I mean when saying MV* crossover app?As you already know you can use the Visual studio 2012 App for SharePoint 2013 template to create app flavors like SharePoint-hosted, Autohosted or Provider-hosted, which can be used as starting point for creating your own apps. And there is this world of client side single page application (SPA) that can be easily mixed into it. If you&#8217;ve ever have written some SPA before, you&#8217;ll know that you&#8217;re in the need to structure your apps real soon, otherwise you&#8217;ll start writing unmaintainable Spaghetti code.That&#8217;s where Model View Controller, Model View Presenter, Model View View Model or short MV* libraries like Knockout, backbone.js&#8230; or frameworks like dojo, yui&#8230; come into play. They help you, and I&#8217;m going to quote John Papa&#8217;s words here:Turn your code from Spaghetti to Ravioli.With that said without further hassle, here&#8217;s what we are going to serve today. Even better find all background information needed to help you get started when cooking your own.If you haven&#8217;t made up your mind yet, which MV* style is the right one for you, drop by http://todomvc.com/.Developers these days are spoiled with choice when it comes to selecting an MV* framework for structuring and organizing their JavaScript web apps.Backbone, Ember, AngularJS, Spine&#8230; the list of new and stable solutions continues to grow, but just how do you decide on which to use in a sea of so many options?To help solve this problem, we created TodoMVC - a project which offers the same Todo application implemented using MV* concepts in most of the popular JavaScript MV* frameworks of today.Want to find out what makes it a framework or library and if one or another better suits your needs? Make sure that you don&#8217;t miss Stephen Sanderson&#8217;s the Seven Frameworks post.Enough theory let&#8217;s get hands-on to see What needs to be done. Each todo below has some instructions and screen shots, but I won&#8217;t dig into too much code today. Don&#8217;t worry though, becauseThe ToDoMVC example is available at github, so clone it and use it as starting point for your own appsEach todo has an associated git tag that let you checkout the example at this specific pointLinks to git diffs are available, whenever there&#8217;s a need for some detailsTodo 1: Create SharePoint 2013 Autohosted appLet&#8217;s start by creating an App for SharePoint 2013 in Visual Studio 2012 and use Autohosted for the hosting type.Todo 2: Clean the stageThe defaults above don&#8217;t do us any good as we are going to create a client side SPA. Let&#8217;s get rid of all Properties and References, and then delete the Pages directory and the TokenHelper.cs file. This will leave us with a really clean stage, which we can build on. Please note that at this point the example isn&#8217;t doing anything. Todo 3: Select from the ToDoMV* menuPicking something from the ToDoMV* menu is completely up to your personal taste, but it probably helps if you already have some experience with the library/framework you chose.If you&#8217;ve seen/read The Ferrari meets JayData, you&#8217;re probably not astonished why my pick for today is the Knockout + RequireJS example from the labs section.Regardless of what you&#8217;ve picked, here are the steps to get it working.Step 1: Choose from the menu. Step2: Copy the files into the web project. Step3: Copy the asset directory that holds common files for all todo examples. Step4: Update the appmanifest.xml so that it points to your index.html (or whatever start page you&#8217;ve created/copied). Step 5: When done press F5 start the app and enjoy the results.Please note: If you are seeing a 405.0 error instead, make sure to apply the settings described in this post SharePoint 2013 App HTTP Error 405.0 Todo 4: Add the chrome controlAdding the chrome control is a two-step process.Step 1: Add the chrome_ctrl_placeholder div to index.html Todo 4 Step Diff 1 Step 2: Add the required chrome control JavaScript to your code. Todo 4 Step Diff 2 Depending on the example you&#8217;ve picked, running this right away might lead to some error messages, which needs to be resolved before moving on. With the Knockout + RequireJS example I&#8217;m running into this. Reason is that this example doesn&#8217;t use jQuery at all&#8230; up till now. So let&#8217;s add it following the RequireJS way and while on it let&#8217;s make sure that we try loading from a CDN first before serving our own local copy.Todo 5: Cosmetic changesThere are only a couple of minor tweaks left like adding an AppIcon, changing the body and/or chrome-control width before we&#8217;re satisfied with the result. That&#8217;s it for today, you&#8217;ve just cooked your first MV* SharePoint 2013 app.Is there more to it? Sure! Here are a couple of suggestions that you might want to try out:Store todos in a SharePoint list instead of local storageStore todos in SQL azureStore todos in your own provider-hosted data-store&#8230; fill in the blanks with your own ideasAs long as you like cooking/coding/building/architecting, I don&#8217;t see any shortcoming of opportunities while SharePoint 2013 is making it to the market."},
{
"title" : "SharePoint 2013 and the notorious disclaimer",
"url" : "/2012/09/05/SharePoint-2013-and-the-notorious-disclaimer","date" :
"05 Sep 2012",
"content" : "At the time of this writing you&#8217;ve probably seen something like the below, while browsing SharePoint 2013 blogs or the documentation on MSDN.Disclaimer MONTH DAY 2012: SharePoint 2013 is in preview at this stage, so some specifics and user experiences may change slightly between now and release time.With that in mind we expect having some fun time while trying to get things working using the documentation/examples that are out there. To make things even more exciting Visual studio 2012 and Windows 8 were just released lately. In contrast most examples have been written using prerelease software.Once you get started with SharePoint apps, you will be in need for examples and you know that officeapps is a great starting point. Me, I&#8217;m primarily interested in SharePoint 2013 apps that use client side REST calls to access server side data. Luckily there are already a couple of examples at officeapps that cover that area.Unfortunately most of them fall under the above Disclaimer category and therefore need some tweaking before they work to my liking.Before moving onNotorious disclaimer September 05 2012: I&#8217;m running the example in a VMWare instance of Win8 plus VS2012, both RTM. Your experience may wary, but that&#8217;s expected.Sorry couldn&#8217;t resist :). With that said let&#8217;s take a specific example like Use the chrome control and the cross-domain library (REST) and see what might happen while you testing it out.Issue 1: HTTPS/HTTP Mixed contentStep 1: Download the example, open in Visual studio 2012 and add your SiteURL Step 2: Run the example and launch the app Step 3: If you see an error messages in VS, hit continue Step 4: Switch to IE and confirm &#8220;Show all content&#8221; Step 5: Finally: Success! What&#8217;s the problem? Based on the IE message we see that we have a mixed bag of https and http content on our page, which is prevented by the default IE settings. Glancing through the html code reveals that we are loading files from a CDN via http while the web site is running on https.1     &lt;script2         src=&quot;http://ajax.aspnetcdn.com/ajax/4.0/1/MicrosoftAjax.js&quot;3         type=&quot;text/javascript&quot;&gt;4     &lt;/script&gt;5     &lt;script6         type=&quot;text/javascript&quot;7         src=&quot;http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.7.2.min.js&quot;&gt;8     &lt;/script&gt;How to mitigate: Instead of simply changing the src attribute to src=&quot;https://ajax...&quot;, which would reintroduce the issue if we later switch the web site protocol from https: to http:, let&#8217;s get rid of the protocol all together so that it reads: src=&quot;//ajax...&quot;. If that syntax doesn&#8217;t look familiar to you, check out 3 reasons why you should let Google host jQuery for you to learn more about it.Issue 2: Chrome control prevents scroll barWhat&#8217;s the problem? The chrome control dynamically loads some additional CSS from the host web. So it&#8217;s not your CSS that causes the issues, it&#8217;s the remote CSS.How to mitigate: The chrome control injects a link id=&quot;... element inside the &lt;head&gt; section, which ensures that this CSS is evaluated first (see issue 4 for details). That allows us to overwrite conflicting styles in our own CSS file. Let&#8217;s create an app.css file and include it in the html file(s). While on it you might want to clean up a little and get rid of the script element that loads MicrosoftAjax.js. Neither the example nor the chrome control and cross-domain library rely on it.1 &lt;head&gt;2    &lt;title&gt;Chrome control host page&lt;/title&gt;3    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;app.css&quot; /&gt;4    &lt;script 5        type=&quot;text/javascript&quot; 6        src=&quot;//ajax.aspnetcdn.com/ajax/jQuery/jquery-1.7.2.min.js&quot;&gt;7    &lt;/script&gt;8    ...9 &lt;/head&gt;app.css:1 body {2     overflow-y: scroll3 }Issue 3: Houston, We&#8217;ve Got a ProblemStep 1: Realize that we have a problem. What&#8217;s the problem? Do we really have a problem here? After the modification done above the example is working and therefore allows grasping the essence of it:This code sample includes a remote webpage that hosts the chrome control and retrieves information from the host web using the cross domain library and Representational State Transfer (REST) in SharePoint 2013 Preview.So again. What&#8217;s the problem? If you are an experienced HTML5/CSS/JavaScript developer there&#8217;s probably none. You&#8217;d see that there are a couple of issues with the example likeleaking globalsscript elements in headerwaiting for $(document).ready before code executionbut you&#8217;d simply ignore them and make a mental note to fix them in your own code. You grasped the essence of it and that&#8217;s what count.Chances are that you&#8217;re coming from a different angle, let&#8217;s say you&#8217;re an experienced .NET or even SharePoint developer and HTML5/CSS/JavaScript is not your prime area of expertise. You make the example work and grasp the essence of it. But because you don&#8217;t know what you don&#8217;t know, you will start replicating the code base&#8230; including the issues.But hey, we got the notorious disclaimer, so Microsoft may change things later down the road. Maybe they start updating the examples closer to the release date. Yes maybe they do, but we better don&#8217;t wait for || rely on it.How to mitigate: Let&#8217;s apply some JavaScript best practice rules and refactor the example. The goal is not to bend it too much, just making it living to the rules without losing the essence.Step 1: Move declared global vars and named functions inside $(document).ready. Catchword: Declared and implied globals.Before: 1 var hostweburl; 2 var appweburl; 3  4 // Load the required SharePoint libraries 5 $(document).ready(function () { 6 ... 7 }); 8  9 // Function to prepare and issue the request to get10 //  SharePoint data11 function execCrossDomainRequest() {12 ..After: 1 // Load the required SharePoint libraries 2 $(document).ready(function () { 3 var hostweburl; 4 var appweburl; 5 ... 6 // Function to prepare and issue the request to get 7 //  SharePoint data 8 function execCrossDomainRequest() { 9 ..10 11 });Step 2: Load scripts at the bottom of your html. Catchword: High Performance Web Sites: Rule 6 1 &lt;!DOCTYPE html&gt; 2 &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt; 3 &lt;head&gt; 4     &lt;title&gt;Chrome control host page&lt;/title&gt; 5     &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;app.css&quot; /&gt; 6 &lt;/head&gt; 7 &lt;body&gt; 8  9     &lt;!-- Chrome control placeholder --&gt;10     &lt;div id=&quot;chrome_ctrl_placeholder&quot;&gt;&lt;/div&gt;11     &lt;h1 class=&quot;ms-accentText&quot;&gt;Main content&lt;/h1&gt;12 13     &lt;!-- This is the placeholder for the announcements --&gt;14     &lt;div id=&quot;renderAnnouncements&quot;&gt;&lt;/div&gt;15 16     &lt;!-- Script tags moved to bottom --&gt;17     &lt;script type=&quot;text/javascript&quot; src=&quot;//ajax.aspnetcdn.com/ajax/jQuery/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;18     &lt;script type=&quot;text/javascript&quot; src=&quot;ChromeLoader.js&quot;&gt;&lt;/script&gt;19     &lt;script type=&quot;text/javascript&quot; src=&quot;CrossDomainExec.js&quot;&gt;&lt;/script&gt;20 &lt;/body&gt;21 &lt;/html&gt;Step 3: By loading scripts at the bottom, the need to wait for $(document).ready before we can kick off our code vanishes away, so we can speed up load time by switching to an Immediately-Invoked Function Expression IIFE instead.Before:1 $(document).ready(function () {2 ...3 });After:1 (function () {2 ...3 })();There are probably other things that you might want to improve, but with those minor tweaks above, we already covered a lot of ground.Further readings: The Essentials of Writing High Quality JavaScript, IIFE and Okay, Houston, we've had a problem hereIssue 4: Preventing flash of unstyled contentWhat&#8217;s the problem? Loading the chrome control happens asynchronously using $.getScript() with renderChrome() as callback. Within renderChrome you first configure the control and then kick it off via nav.setVisible(true) . This will add the dynamic link element that finally loads the remote CSS. So there&#8217;s a time frame after document.ready in which our static HTML content will not be aware of the remote CSS.1    ...2    // Load the js file and continue to the3     //   success handler4     $.getScript(scriptbase + &quot;SP.UI.Controls.js&quot;, renderChrome)5 });6 7 //Function to prepare the options and render the control8 function renderChrome() {9 ...How to mitigate: Switching from SP.UI.Controls.js to SP.UI.Controls.debug.js let step us into nav.setVisible(true), where we see how MS constructs the link to defaultcss.ashx and sets up an event listener to determine when the CSS is loaded. 1 ... 2 if (visible &amp;&amp; !this.$s_0) { 3             var $v_0 = (document.getElementsByTagName(&#39;head&#39;))[0]; 4             var $v_1 = document.createElement(&#39;link&#39;); 5  6             $v_1.setAttribute(&#39;id&#39;, SP.UI.Controls.Navigation.$2 + SP.UI.Controls.Navigation.$12); 7             $v_1.setAttribute(&#39;rel&#39;, &#39;stylesheet&#39;); 8             $v_1.setAttribute(&#39;type&#39;, &#39;text/css&#39;); 9             $v_1.setAttribute(&#39;href&#39;, this.$3_0 + SP.UI.Controls.Navigation.getVersionedLayoutsUrl(&#39;defaultcss.ashx&#39;));10 11             if ($v_1.addEventListener) {12                         var $$t_5 = this;13 14                         $v_1.addEventListener(&#39;load&#39;, function() {15                             SP.UI.Controls.Navigation.$z($$t_5, visible);16                         }, false);17                     }18 ...What&#8217;s good for MS is good for us, so we add a style=&quot;display: none&quot; to the body tag and add our own event handler that changes the style attribute to display: block when the CSS is loaded. As we are already using jQuery this is pretty straight forward.1 ...2     nav.setVisible(true);3     $(&#39;#chromeControl_stylesheet&#39;).on(&#39;load&#39;, function (event) {4         $(&#39;body&#39;).show();5     })That&#8217;s it for today and as a benefit for people who really made it till the end of this TL;DR, here&#8217;s a link to github, where the code for today&#8217;s post is available. While there take a look at the commit history and you&#8217;ll see that for every issue described above there&#8217;s a commit available.Feel free to clone and send me a pull request if you find other issues.You are working on another example, but find applying the above modifications beneficial? Good, make sure to share. I&#8217;m using the shortened URL from officeapps as git repository name. Create a git repro using this naming convention and link to your repro from the officeapps example Q&amp;A section."},
{
"title" : "SharePoint 2013 App HTTP Error 405.0",
"url" : "/2012/09/03/SharePoint-2013-App-HTTP-Error-405.0","date" :
"03 Sep 2012",
"content" : "Hi there!Today&#8217;s post is just a short one about an HTTP Error 405.0 that I was seeing when trying to get an Autohosted SharePoint app working with static files. If you&#8217;re not sure what a SharePoint App is or what it&#8217;s good for read Ted Pattison&#8217;s blog My first weekend in Napa and the Apps for Office and SharePoint blog to get you started.So what happened? I wanted to replace the default files in an Autohosted template with files coming from my favorite HTML5 framework: Zurb foundation.If you don&#8217;t trust screenshots ;-) here are the steps to follow along:Step 1: Create an App for SharePoint Step 2: Choose Autohosted for hosting type Step 3: Get rid of the defaults files, references and properties  Step 4: Copy/paste you static HTML files and adjust AppManifest  Step 5: Run the app, trust it and &#8230; HTTP Error 405.0  I&#8217;m pretty sure you&#8217;ve been to http://code.msdn.microsoft.com/office before and seen many SharePoint 2013 examples with the following troubleshooting message.Unfortunately after applying the additional verbs to my applicationhost.config file I still got the same error :(.For further troubleshooting I&#8217;ve added a new handler StaticHTML for *.html files, which while leading to the same error at least proved that the new handler with all correctly configured verbs was used by the system.1  ..2  &lt;handlers&gt;3     ..4     &lt;add name=&quot;StaticHTML&quot; path=&quot;*.html&quot; verb=&quot;GET,HEAD,POST,DEBUG,TRACE&quot; modules=&quot;StaticFileModule&quot; resourceType=&quot;File&quot; requireAccess=&quot;Read&quot; /&gt;5     &lt;add name=&quot;StaticFile&quot; path=&quot;*&quot; verb=&quot;*&quot; modules=&quot;StaticFileModule,DefaultDocumentModule,DirectoryListingModule&quot; resourceType=&quot;Either&quot; requireAccess=&quot;Read&quot; /&gt;6  &lt;/handlers&gt;7  After a moment of frustation Google-fu came to the rescue: this post talks about some intrinic of the StaticFileHandler and why static sometimes is not static enough. After following the recommendation of adding an AspNetStaticFileHandler everything was working as expected.1  ..2  &lt;handlers&gt;3     ...4     &lt;add name=&quot;AspNetStaticFileHandler&quot; path=&quot;*&quot; verb=&quot;*&quot; type=&quot;System.Web.StaticFileHandler&quot; /&gt;5     &lt;add name=&quot;StaticHTML&quot; path=&quot;*.html&quot; verb=&quot;GET,HEAD,POST,DEBUG,TRACE&quot; modules=&quot;StaticFileModule&quot; resourceType=&quot;File&quot; requireAccess=&quot;Read&quot; /&gt;6     &lt;add name=&quot;StaticFile&quot; path=&quot;*&quot; verb=&quot;*&quot; modules=&quot;StaticFileModule,DefaultDocumentModule,DirectoryListingModule&quot; resourceType=&quot;Either&quot; requireAccess=&quot;Read&quot; /&gt;7  &lt;/handlers&gt;8  Finally: SharePoint Autohosted App meets Zurb foundation Update 09/09: Ready to deploy to Azure? Make sure to add the handlers to web.config otherwise you&#8217;ll be presented with a similiar error 405.0 when trying to launch your app on azure."},
{
"title" : "Nappa apps and Chrome Control",
"url" : "/2012/08/28/napa-app-and-chrome-control","date" :
"28 Aug 2012",
"content" : "Let&#8217;s assume you&#8217;vea) read Ted Pattison&#8217;s blog My first weekend in Napa and got Microsoft&#8217;s inviteBut then I think about this new breed of SharePoint developer that Mike Morton described to me. A developer that&#8217;s never never used SharePoint before and has never seen a SharePoint dinosaur like me (except maybe in a museum). This developers has a very high IQ and has tons of experience with things like .NET, C#, JavaScript and jQueryb) seen my previous post that turned the OOTB Nappa masterpage template into an easier to handle HTML5 templateJust to recap. In the template we removed the reference to the masterpage, which is normally responsible to load the chrome for Nappa apps, because we didn&#8217;t like the overhead that comes with it. According to the invite you&#8217;ve never seen SharePoint before (feel free to read on even if you have) and you&#8217;re wondering if you&#8217;re now supposed to turn the minimalistic Nappa template (see below) into something that looks like a SharePoint app on your own.Don&#8217;t wonder any longer, you don&#8217;t ;-) and even better there are just a few changes necessary. Without the masterpage reference our current Nappa template behaves more like a hosted HTML5 app and for that kind of SharePoint app Microsoft already offers the client chrome control.For the eager of you here are the 5 steps that provide you access to a clean Nappa template that uses the client chrome control:Step 1: Create a new Nappa app  Step 2: Replace default.aspx content with this default.aspx content  Step 3: Replace apps.js content with this app.js content  Step 4: Change permission to allow read access to web  Step 5: . Trust the app  Step 6: Party time: A clean Nappa App template with client chrome control The chrome configuration is done in the renderChrome() function and is following the settings in this MSDN the client chrome control article. Please note that the MSDN settings assume that you create a couple of additional pages otherwise the links won&#8217;t work.One minor issue that I&#8217;ve noticed it that without further modifications the MSDN version might lead to some flash of unstyled content (fouc). One way to prevent that is to change our HTML in default.aspx to &lt;divid=&quot;message&quot; style=&quot;display: none&quot;&gt; to hide our message div by default. In our code we then bind to the load event of the dynamically injected stylesheet and leverage $(&#39;#message&#39;).show(); to show the message.1 var nav = new SP.UI.Controls.Navigation(2                         &quot;chrome_ctrl_placeholder&quot;,3                         options4                   );5 nav.setVisible(true);6 $(&#39;#chromeControl_stylesheet&#39;).on(&#39;load&#39;, function (event) {7     $(&#39;#message&#39;).show();8 })With those modification you should have a nice clean starting template for your HTML5 Nappa apps.Let&#8217;s party!"},
{
"title" : "Goodbye Ferrari, hello Napa?",
"url" : "/2012/08/24/goodbye-ferrari-hello-napa","date" :
"24 Aug 2012",
"content" : "Hey there!If you&#8217;ve seen my series about the SharePoint DVWP in Ferrari mode (Part 1, Part 2, Part 3) you remember that we ended up with a small HTML5/CSS3/JavaScript app that is running on SP 2010 and SP 2013.Today we take some of our lessons learned and try to apply them into the brave new world of SP 2013 apps or to be more precise into the world of Napa apps. Please note that I&#8217;m not going to cover the whole SharePoint 2013 App Model, but if you want to learn more about it, spend an hour and watch Jeremy Thake&#8217;s screencast about that topic.Why should we talk about Napa apps in the first place? One reason is that Napa apps are the lowest hanging fruits in SP2013 development at least in terms of required infrastructure. You don&#8217;t need to setup an on premise SP2013 development environment and you&#8217;re not required to have Visual studio 2012 installed.With that said if you want to follow along and haven&#8217;t Napa yet, this Office 365 Developer page will get you started.Just to get our feet wet let&#8217;s create an OOTB app called &#8216;SharePointApp1&#8217; and run the project without further modification.Step 1 Add a new project  Step 2 Choose App for SharePoint and give it a name  Step 3 Press the Run project button and see how the system is doing its job to package, deploy and launch your app  Step 4 Be impressed with the results of all your hard work :) Take a quick glance at the HTML source of our impressive app. I say impressive because even though the payload is just the User Name it has 644 lines of code. The reason is that our small &#8216;payload&#8217; is nicely embedded into SP2013, which comes with a price. 1 &lt;%-- The following 4 lines are ASP.NET directives needed when using SharePoint components --%&gt; 2 &lt;%@ Page Inherits=&quot;Microsoft.SharePoint.WebPartPages.WebPartPage, Microsoft.SharePoint, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c&quot; MasterPageFile=&quot;~masterurl/default.master&quot; language=&quot;C#&quot; %&gt; 3 &lt;%@ Register Tagprefix=&quot;SharePoint&quot; Namespace=&quot;Microsoft.SharePoint.WebControls&quot; Assembly=&quot;Microsoft.SharePoint, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c&quot; %&gt; 4 &lt;%@ Register Tagprefix=&quot;Utilities&quot; Namespace=&quot;Microsoft.SharePoint.Utilities&quot; Assembly=&quot;Microsoft.SharePoint, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c&quot; %&gt; 5 &lt;%@ Register Tagprefix=&quot;WebPartPages&quot; Namespace=&quot;Microsoft.SharePoint.WebPartPages&quot; Assembly=&quot;Microsoft.SharePoint, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c&quot; %&gt; 6  7 &lt;%-- The markup and script in the following Content element will be placed in the &lt;head&gt; of the page --%&gt; 8 &lt;asp:Content ContentPlaceHolderId=&quot;PlaceHolderAdditionalPageHead&quot; runat=&quot;server&quot;&gt; 9     &lt;script src=&quot;https://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.6.2.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;10 11     &lt;!-- Add your CSS styles to the following file --&gt;12     &lt;link rel=&quot;Stylesheet&quot; type=&quot;text/css&quot; href=&quot;../Content/App.css&quot; /&gt;13 14     &lt;!-- Add your JavaScript to the following file --&gt;15     &lt;script type=&quot;text/javascript&quot; src=&quot;../Scripts/App.js&quot;&gt;&lt;/script&gt;16 &lt;/asp:Content&gt;17 18 &lt;%-- The markup and script in the following Content element will be placed in the &lt;body&gt; of the page --%&gt;19 &lt;asp:Content ContentPlaceHolderId=&quot;PlaceHolderMain&quot; runat=&quot;server&quot;&gt;20 21     &lt;div&gt;22         &lt;p id=&quot;message&quot;&gt;23             &lt;!-- The following content will be replaced with the user name when you run the app - see App.js --&gt;24             initializing...25         &lt;/p&gt;26     &lt;/div&gt;27 28 &lt;/asp:Content&gt;Within the Source we see some familiar ASP.NET directives with a link to a masterpage and then two &lt;asp:Content&gt; blocks.The PlaceHolderAdditionalPageHead is used to load your app specific CSS and JavaScript. The CSS is of no interest for us at the moment so let&#8217;s take a look at App.js instead. 1 var context; 2 var web; 3 var user; 4  5 // This code runs when the DOM is ready. It ensures the SharePoint 6 // script file sp.js is loaded and then executes sharePointReady() 7 $(document).ready(function () { 8     SP.SOD.executeFunc(&#39;sp.js&#39;, &#39;SP.ClientContext&#39;, sharePointReady); 9 });10 11 // This function creates a context object which is needed to use the SharePoint object model12 function sharePointReady() {13     context = new SP.ClientContext.get_current();14     web = context.get_web();15 16     getUserName();17 }18 19 // This function prepares, loads, and then executes a SharePoint query to get the current users information20 function getUserName() {21     user = web.get_currentUser();22     context.load(user);23     context.executeQueryAsync(onGetUserNameSuccess, onGetUserNameFail);24 }25 26 // This function is executed if the above call is successful27 // It replaces the contents of the &#39;helloString&#39; element with the user name28 function onGetUserNameSuccess() {29     $(&#39;#message&#39;).text(&#39;Hello &#39; + user.get_title());30 }31 32 // This function is executed if the above call fails33 function onGetUserNameFail(sender, args) {34     alert(&#39;Failed to get user name. Error:&#39; + args.get_message());35 }Beside the fact that the small code leaks more than half a dozen globals, which makes some of us laugh and some of us cry, we see that getUserName() retrieves the user information from the app web via CSOM and finally onGetUserNameSuccess() renders the Hello username message.Checkpoint So far everything was nice and easy I&#8217;d say and you shouldn&#8217;t have an issue if you follow along.Now let&#8217;s switch gears by first getting rid of the SharePoint chrome. Simply copy Source2 and replace your existing default.aspx content in Napa. Running the app will show that the HTML source2 for the page is down to 18 lines.By glancing through Source2 you see that we are still using some ASP.NET directives, just the reference to the masterpage has gone. In addition the &lt;asp:Content&gt; blocks have been replaced by some standard HTML5. In Part 1 we stripped down the DVWP in a similar manner, so we might call this mode the Naparari :-).Please note that at this time the JavaScript won&#8217;t work as some required CSOM files are loaded via the masterpage we just removed. 1 &lt;%-- The following 5 lines are ASP.NET directives needed when using SharePoint components --%&gt; 2  3 &lt;%@ Page Inherits=&quot;Microsoft.SharePoint.WebPartPages.WebPartPage, Microsoft.SharePoint, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c&quot; Language=&quot;C#&quot; %&gt; 4  5 &lt;%@ Register TagPrefix=&quot;SharePoint&quot; Namespace=&quot;Microsoft.SharePoint.WebControls&quot; Assembly=&quot;Microsoft.SharePoint, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c&quot; %&gt; 6 &lt;%@ Import Namespace=&quot;Microsoft.SharePoint&quot; %&gt; 7 &lt;%@ Register TagPrefix=&quot;Utilities&quot; Namespace=&quot;Microsoft.SharePoint.Utilities&quot; Assembly=&quot;Microsoft.SharePoint, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c&quot; %&gt; 8 &lt;%@ Register TagPrefix=&quot;WebPartPages&quot; Namespace=&quot;Microsoft.SharePoint.WebPartPages&quot; Assembly=&quot;Microsoft.SharePoint, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c&quot; %&gt; 9 10 &lt;!DOCTYPE HTML&gt;11 &lt;html&gt;12 &lt;head&gt;13     &lt;title&gt;14         &lt;SharePoint:ProjectProperty Property=&quot;Title&quot; runat=&quot;server&quot; /&gt;15     &lt;/title&gt;16     &lt;!-- Add your CSS styles to the following file --&gt;17     &lt;link rel=&quot;Stylesheet&quot; type=&quot;text/css&quot; href=&quot;../Content/App.css&quot; /&gt;18 &lt;/head&gt;19 &lt;body&gt;20     &lt;div id=&quot;message&quot;&gt;21         &lt;!-- The following content will be replaced with the user name when you run the app - see App.js --&gt;22         initializing...23     &lt;/div&gt;24     &lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.0.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;25     &lt;script type=&quot;text/javascript&quot; src=&quot;../Scripts/App.js&quot;&gt;&lt;/script&gt;26 &lt;/body&gt;27 &lt;/html&gt;Second let&#8217;s make some modification to app.js.Goal: In addition to the username we want to retrieve the web title from the host webGoal: Instead of adding the required CSOM files, we are switching to ODataGoal: While on it let&#8217;s get rid of the globals ;-).Napa apps like other SharePoint Apps enforces a clear separation between the host web, the web where you install your app, and the app web, the place where your code is actually running.As an example take a look at my host web URL: https://spirit2013preview.sharepoint.com/sites/dev/Whenever a Napa app is launched it runs at an app web URL similiar tohttps://spirit2013preview-b0204c96e900db.sharepoint.com/sites/dev/GoodbyeFerrariHelloNapa/Pages/Default.aspxYou see that an app specific GUID like -b0204c96e900db is added to the host header, so for our JavaScript code that is running in the app web there&#8217;s NO way to access information directly in the host web due to cross site scripting restriction.Let&#8217;s see how our goals can be accomplished in the JavaScript below, which is based on code from MSDN. If you&#8217;re not familiar with the cross-domain library SP.RequestExecutor.js please check it out first.Goal 1 and 2: The answer to both goals live in the execCrossDomainRequest() function. As you can see we are executing a call against the local SPAppWebUrl /_api/SP.AppContextSite(@target)/ OData endpoint and passing in SPHostUrl as @target. Effectivily this will provide us access to the remote SPHostUrl/_api endpoint (through the cross-domain library).Beside the cross-domain library specific you can now use the same OData syntax that you would use locally e.g. here /web?$expand=CurrentUser is used to retrieve web and at the same time CurrentUser information.Goal 3: There&#8217;s more than one way to accomplish that, but to be close to the origal version let&#8217;s wrap our code in an Immediately-Invoked Function Expression IIFE, which you might know as self-executing anonymous function as well. 1 (function () { 2     var params = getParams(), 3         scriptbase = params.SPHostUrl + &quot;/_layouts/15/&quot;; 4  5  6     // Load the js file and continue to the 7     //   success event handler. 8     $.getScript(scriptbase + &quot;SP.RequestExecutor.js&quot;, execCrossDomainRequest); 9 10 11     // Function to prepare and issue the request to get12     //  SharePoint data.13     function execCrossDomainRequest() {14         var executor = new SP.RequestExecutor(params.SPAppWebUrl);15 16         // Issue the call against the host web.17         // To get the title using REST we can hit the endpoint:18         //      app_web_url/_api/SP.AppContextSite(@target)/web/title?@target=&#39;siteUrl&#39;19         // The response formats the data in the JSON format.20         // The functions successHandler and errorHandler attend the21         //      success and error events respectively.22         executor.executeAsync(23             {24                 url:25                     params.SPAppWebUrl +26                     &quot;/_api/SP.AppContextSite(@target)/web?$expand=CurrentUser&amp;@target=&#39;&quot; +27                     params.SPHostUrl + &quot;&#39;&quot;,28                 method: &quot;GET&quot;,29                 headers: { &quot;Accept&quot;: &quot;application/json; odata=verbose&quot; },30                 success: successHandler,31                 error: errorHandler32             }33         );34     }35 36     // Function to handle the success event.37     // Prints the host web&#39;s title to the page.38     function successHandler(data) {39         var jsonObject = JSON.parse(data.body);40         $(&#39;#message&#39;).html(jsonObject.d.CurrentUser.Title  +41                     &#39;&lt;br/&gt;host web: &lt;b&gt;&#39; + jsonObject.d.Title + &#39;&lt;/b&gt;&#39;);42     }43 44     // Function to handle the error event.45     // Prints the error message to the page.46     function errorHandler(data, errorCode, errorMessage) {47         $(&#39;#message&#39;).html(&quot;Could not complete cross-domain call: &quot; + errorMessage);48     }49 50 51     // Returning the params object52     function getParams() {53         var params = {};54         location.search.split(&#39;?&#39;)[1].split(&#39;&amp;&#39;).forEach(function (param) {55             var key = param.split(&#39;=&#39;)[0],56                 val = decodeURIComponent(param.split(&#39;=&#39;)[1]);57             params[key] = val;58         });59         return params;60     }61 62 })();After all that hard work here&#8217;s the Punchline:Running the example right away won&#8217;t work!The reason is that we missed the most important configuration part for SP 2013 apps. Whenever your app requires acccessing information in the host web you have to configure the appropriate permissions. In addition whenever a site admin installs an app, they have to decide if they trust your app or not.It will be interesting to see how this new concept (new to SharePoint, you&#8217;re probably familiar with it from mobile apps) will pay off in the real world.For Napa apps there&#8217;s just one additional step required as developer, so let&#8217;s walk trough that process quickly.Step 1 As a developer you have to explicitly ask for permission for your app  Step 2 As site admin you have to trust the app  Step 3 Finally the desired result: No chrome, user name and (Host)web title. That&#8217;s it for today and I&#8217;m leaving you with this example, which -while visually not as impressive as the first version- under the hood is clean as hell and hopefully well understood ;-). Take it a starting point for your own Napa apps and let me know how it goes.One question though: How do you feel about SP apps and the SP marketplace in general? Are you already sold (can&#8217;t wait for it to open, so that you can get rich) or do you have some concerns compared to traditional farm or sandbox solutions?"},
{
"title" : "The Ferrari meets JayData",
"url" : "/2012/08/01/the-ferrari-meets-jaydata","date" :
"01 Aug 2012",
"content" : "Good morning, good afternoon, good evening to you.Welcome back to a new episode in the Ferrari series. For those of you who remember what I call the Ferrari read on; all other please make yourself familiar with Part 1 and Part 2 in this series before moving on.In Part 2 we ended up with a HTML5 app that shows a nice metro style tile view of SharePoint lists and libraries. This time we want to enhance the solutions so that it retrieves items through SharePoint&#8217;s OData service. Sorry SP2007 we&#8217;ve to leave you behind as this service was first introduced in SP2010. Don&#8217;t worry too much though; using REST is forward thinking as SP2013 will expose a whole new REST API that will greatly expanding the existing capabilities.In the simplest form you could make XHR calls to the service endpoint at _vti_bin/listdata.svc, but we&#8217;re not going down that route. Instead we&#8217;re using JayData for doing the heavy lifting. While being relatively new to the market JayData brings an astonishing range of capabilities to the table, one of them is the abstracting of underlying storage provider. Yes, you heard me right; OData is just one of the supported storage provider, see JayData provider for a full list. Once you learned a little bit about JSLQ the JavaScript Query Language you will (probably) never go back talking to any storage provider on your own.After settling on JayData the next choice is about a client framework that helps us building our dynamic UI. JayData comes with a bunch of modules that offers integration into various third party frameworks and knockout is one of them. A word of warning take everything that you see me doing with knockout with some grain of salt, as I haven&#8217;t worked with it before. The last piece of software that I want to bring to the table is of course RequireJS. We are going to build a JavaScript app and based on my experience there&#8217;s simply no way of writing one without it.So without further hassle we are now going to build a pretty straight forward three tier navigation, which BTW will align us nicely with the Metro-style design guides; and nah, we won&#8217;t do Metro style left &lt;-&gt; right scrolling, this is still a web app not Window 8 Metro ;-). For the eager of you here are the links to the live demos:Live on SP 2010Live on SP 2013First tier: Entry screen consists of a Tile View (green) and a Login View (yellow). The whole page can be served anonymously, but in order to see the next tier you&#8217;ve to log on. You probably heard me saying that before &#8220;SharePoint OData service won&#8217;t work anonymously&#8221;.The following HTML is used as by Knockout to produce the Tile View. 1 &lt;div class=&quot;row&quot; id=&quot;tileVM&quot;&gt; 2     &lt;div class=&quot;twelve columns tiles&quot; 3          data-bind=&quot;foreach: TileData, updateTilesOnce: true&quot;&gt; 4         &lt;div class=&quot;live-tile&quot; data-stops=&quot;100%&quot; data-speed=&quot;750&quot; data-delay=&quot;-1&quot; 5              data-bind=&quot;class: color + &#39; &#39; + size, 6                         attr: {&#39;data-mode&#39;: mode ? mode : &#39;&#39;, &#39;data-direction&#39;: direction} , 7                         click: $root.goToDetail&quot;&gt; 8             &lt;span class=&quot;tile-title&quot; data-bind=&quot;text: title&quot;&gt;&lt;/span&gt; 9             &lt;span class=&quot;badge&quot; data-bind=&quot;text: count&quot;&gt;&lt;/span&gt;10 11             &lt;div&gt;12                 &lt;img class=&quot;micon&quot; data-bind=&quot;attr: {src: icon}&quot;/&gt;13             &lt;/div&gt;14             &lt;div&gt;15                 &lt;h3 data-bind=&quot;text: backTitle&quot;&gt;&lt;/h3&gt;16                 &lt;span class=&quot;prettyDate&quot; data-bind=&quot;attr: {title: prettyDate}&quot;&gt;&lt;/span&gt;17             &lt;/div&gt;18         &lt;/div&gt;19     &lt;/div&gt;20 &lt;/div&gt;And here&#8217;s the TileViewModel as RequireJS module leveraging the revealing module pattern. I&#8217;ve seen John Papa mentioning this pattern more than once. BTW feel free to provide feedback about your favorite way to structure knockout apps. 1 define ([&#39;knockout&#39;, &#39;helper&#39;], function ( ko, fn ) { 2     &quot;use strict&quot;; 3  4     return function () { 5         // ko observables 6         var userId = ko.observable ().subscribeTo (&#39;userId&#39;), 7             selectedList = ko.observable ().subscribeTo (&#39;selectedList&#39;), 8             TileData = ko.observableArray ([]), 9         // functions10             goToDetail;11 12         // end of var declaration13 14         goToDetail = function ( tile, event ) {15             if ( userId () !== &#39;anonymous&#39; ) {16 17                 selectedList (fn.cleanup (tile.title));18                 location.hash = &#39;/view/&#39; + selectedList ();19             }20             else {21                 alert (&#39; Make sure to log on.&#39;);22             }23         };24 25         // Bootstrap26         TileData (app.tilesData.tiles.tile);27 28 29         // Return public methods30         return{31             userId : userId,32             TileData : TileData,33             goToDetail : goToDetail34         };35     };36 });Our trusted DVWP produces the required app.tilesData.tiles.tile array that is used to bootstrap the TileData observableArray. I&#8217;m not going to cover the required XSLT here as this is just a variation what we did in Part 2, but if you want to deep dive again take a look at this gist .com/3227125#L150'>DVWP&#8217;s settings and XSLT.Here&#8217;s the HTML for the login area and the related LogonViewModel. 1  &lt;div id=&quot;logonVM&quot;&gt; 2     &lt;div data-bind=&quot;visible: userId() !== &#39;anonymous&#39; &quot; style=&quot;display: none;&quot;&gt; 3         You&#39;re logged on as: &lt;span class=&quot;success label&quot; data-bind=&quot;text: userId&quot;&gt;&lt;/span&gt; 4     &lt;/div&gt; 5     &lt;div data-bind=&quot;visible: userId() === &#39;anonymous&#39; &quot; style=&quot;display: none;&quot;&gt; 6         &lt;a href=&quot;#&quot; data-bind=&quot;attr: {href: loginURL}&quot; class=&quot;button&quot;&gt; Sign 7             in&lt;/a&gt; 8         with username: &lt;span class=&quot;secondary label&quot;&gt;ODataDemo&lt;/span&gt; password: &lt;span class=&quot;secondary label&quot;&gt;OData!Demo&lt;/span&gt; 9     &lt;/div&gt;10 &lt;/div&gt; 1 define ([&#39;knockout&#39;], function ( ko ) { 2     &quot;use strict&quot;; 3  4     return function () { 5         var userId = ko.observable (app.configMap.userId).publishOn (&#39;userId&#39;), 6             loginURL; 7  8         loginURL = ko.computed (function () { 9             return &#39;../_layouts/Authenticate.aspx?Source=&#39; + encodeURIComponent (location.pathname) + location.hash;10         });11 12         // Return public methods13         return {14             userId : userId,15             loginURL : loginURL16         }17     }18 });Second tier: The Login View (yellow) will show your username once you&#8217;re logged in and by clicking on one of the tiles you&#8217;ll see 10 items of the chosen list or library. Bear in mind that this is a demo, but adding paging, sorting and filtering per data source in the UI would be a pretty straight forward as they are already implemented in the ListingViewModel.Third tier: By clicking on one of the level 2 tiles you&#8217;ll see the full detail information on the right. One of the benefits of working with OData is that is allows you to get multiple related information in single call, which greatly simplifies your life as client side app developer.From the OData websiteA URI with a $expand System Query Option indicates that Entries associated with the Entry or Collection of Entries identified by the Resource Path section of the URI must be represented inline (i.e. eagerly loaded). For example, if you want to identify a category and its products, you could use two URIs (and execute two requests), one for /Categories(1) and one for /Categories(1)/Products. The &#8216;$expand&#8217; option allows you to identify related Entries with a single URI such that a graph of Entries could be retrieved with a single HTTP request.For this demo I haven&#8217;t separated the Listing and the Detail view and the Detail view is just an un-styled list of properties for the current item. For a larger application it would probably make sense to separate the views and work the detail view a little bit out ;-).To see the full html and JS that is involved take a look at this gist, I&#8217;m going to concentrate on the parts that deal with the JayData configuration here.But before we can do that, we need to take quick look how all the various VMs are integrated by RequireJS. As in almost every standard RequireJS app there&#8217;s a main.js file that allows you to configure various aspects and then kick off your app. 1 require.config({ 2    //By default load any module IDs from js/lib 3     baseUrl : &#39;libs&#39;, 4     paths : { 5        // Try loading from CDN first 6        ... 7  8 require([&#39;app&#39;], function (app) { 9     // we can safely kick of the app even before document.ready10     app.init();11 });Within app.js we define dependencies on the various VMs that you&#8217;ve seen earlier and within the init method we use ko.applyBindings() to bind them to the corresponding element in the DOM. As said I&#8217;m new to knockout, so I leave it to the experts if that&#8217;s a recommend pattern or not. At least it&#8217;s working, so it can&#8217;t be totally wrong ;-). Path.js is used as a light alternative to sammy.js in order to setup some URL rules. As you can see Ryan Niemeyer&#8217;s excellent postbox -a native ko pubsub sytem- is used to notify subscribers whenever changes occur. 1 define ([&#39;jquery&#39;, &#39;knockout&#39;, &#39;LogonVM&#39;, &#39;TileVM&#39;, &#39;ListingVM&#39;, &#39;postbox&#39;, &#39;path&#39;, &#39;appData&#39;, &#39;kocBH&#39; ], 2     function ( $, ko, LogonVM, TileVM, ListingVM, postbox ) { 3         &quot;use strict&quot;; 4  5         var init = function () { 6  7             // Exposing ko as global 8             window.ko = window.ko || ko; 9             var $tileContainer = $ (&#39;#tileVM&#39;);10 11             // Configuring JayData to use current site&#39;s Odata service12             app.context = new app.MetroStyleDataContext ({ name : &#39;oData&#39;, oDataServiceHost : &#39;../_vti_bin/listdata.svc&#39; });13 14             // binding ko to the appropriate container15             ko.applyBindings (new TileVM (), document.getElementById (&#39;tileVM&#39;));16             ko.applyBindings (new LogonVM (), document.getElementById (&#39;logonVM&#39;));17             ko.applyBindings (new ListingVM (), document.getElementById (&#39;listingVM&#39;));18 19             // Client-side routes. Path exposed as global via shim configuration20             function toggleTiles() {21                 var isVisible = $tileContainer.css (&#39;display&#39;) === &#39;block&#39;;22                 isVisible ? $tileContainer.slideUp (300) : $tileContainer.slideDown (300);23             }24 25             Path.map (&quot;#/view/:list&quot;).to (function () {26                 postbox.publish (&#39;selectedList&#39;, this.params.list);27             }).enter (toggleTiles);28 29             Path.map (&quot;(#)&quot;).to (function () {30                 postbox.publish (&#39;selectedList&#39;, &#39;&#39;);31             }).enter (toggleTiles);32 33             Path.listen ();34         };35 36         return {37             init : init38         }39 40     });Boy, Rainer! All those talk about RequireJS and knockout basics. I&#8217;m already familiar with it, so where&#8217;s the beef? You promised to tell us about JayData, didn&#8217;t you?Yes I did and here you go.Part 1: Retrieving ListingView date via OData service. 1  postbox.subscribe (&quot;selectedList&quot;, function ( newValue ) { 2     if ( app.configMap.userId === &#39;anonymous&#39; ) { 3         return alert (&#39;Make sure to log on.&#39;); 4     } 5     if ( newValue !== &#39;&#39; ) { 6         // Clean out existing itemDetail 7         itemDetail ([]); 8         var base = app.context[newValue], 9             myBase = _.extend ({}, base),10             sortExp = &#39;it.&#39; + orderBy ();11 12         if ( orderAsc () ) {13             _.extend (myBase, myBase.orderBy (sortExp));14         }15         else {16             _.extend (myBase, myBase.orderByDescending (sortExp));17         }18         _.each (includeArray (), function ( inc ) {19             _.extend (myBase, myBase.include (inc));20         });21         myBase.map (chooseMap (newValue))22             .take (take ())23             .toArray (allItems);24     }25     else {26         // Clean out existing allItems27         allItems ([]);28         // Clean out existing itemDetail29         itemDetail ([]);30     }31 });Within ListingViewModel.js you find the above postbox.subscriber that listen to any change in the selectedList channel. After checking if there&#8217;s a non empty value and that the user is already logged in JayData takes over.app.context knows about all lists and libraries, so here we use base to select a specific one var base = app.context[newValue]orderBy() or orderByDescending() are using the default sorting criteria . This can be modified during runtime by updating the OrderAsc and OrderBy observables.include() in OData terms maps to the OData $expand verb. Default settings here are CreatedBy and ModifiedBy. There&#8217;s a includeArray() observabelArray that is used to store the ones you&#8217;re interested in.map() mapping or projection is another important feature that allows you to select specific fields instead of retrieving all information. The chooseMap() method is used to retrieve a small set of fields based on their availability e.g. Title vs. Name vs URL.take() allows you to restrict the number of items returned by the system. Again a observable is used to store the default.toArray() and finally this method is used to update the allItems observableArray. For those of you that are curious how that works under the cover, take a look at the .org/blog/how-to-use-jaydata-with-knockoutjs'>following blog post.Part 2: Retrieving the Detail View data for a selected item. 1  showDetails = function (currItem) { 2     var currentList = selectedList(); 3  4     app.context[currentList] 5         .single(function (item) { 6             return item.Id == this.Id 7         }, 8         {Id : currItem.Id}, 9         function (item) {10             var keyValue = [];11             _.each(item.toJSON(), function (val, key) {12                 keyValue.push({&quot;key&quot; : key, &quot;val&quot; : val});13             });14             itemDetail([]);15             ko.utils.arrayPushAll(itemDetail(), keyValue);16             itemDetail.valueHasMutated();17         });18 };Come on, that&#8217;s almost too easy isn&#8217;t it? This time we&#8217;re using JSLQ`s .single method to retrieve ONE item based on a unique criteria, here the currItem.Id. Whenever the system returns the information it&#8217;s converted to JSON. Underscore&#8217;s each method allows us to push the returned key/value pairs into the keyValue array. Whenever done we use ko.utils.arrayPushAll to update the itemDetails() observable and valueHasMutated() to notify it about the changes.As you can see, we haven&#8217;t dealt a bit with the native OData protocol and when you take a look at what&#8217;s going over the wire you&#8217;ll be surprised how complex it can get. But luckily that is of no concern for us any longer as we only have to deal with JSLQ.That&#8217;s it for today, but before you ask I wanna cover two questions that I feel coming up:Would you choose JayData for another project?That&#8217;s a clear YES. JayData is something that&#8217;s better than sliced bread. Luckily it&#8217;s already invented.Would you choose knockout for another project?Yes&#8230; most likely. After reading some of the stuff over at the knockout site itself, but more important over at Ryan Niemeyer&#8217;s blog, I found it pretty straight forward to work with. By being the only overall framework that JayData supports as module at the moment, it&#8217;s the natural choice for the time being. With that said, there are already Sencha and Titanium modules out there, so maybe there&#8217;s a JayData backbone module one day&#8230; at that point feel free to ask me that question again.One last thing, you can find the code for the 2010 demo site on .com/RainerAtSpirit/FerrariMeetsJayData'>github. You have to update the appdata.js in order to work in your environment. Checkout this post that guides you through the required steps with JaySvcUtil."},
{
"title" : "The SharePoint DVWP in Ferrari mode strikes again",
"url" : "/2012/07/20/the-sharepoint-dvwp-in-ferrari-mode-strikes-again","date" :
"20 Jul 2012",
"content" : "In the last post we dissected the SharePoint DVWP up till the point where it delivered clean HTML5. If you remember I call this mode the Ferrari. Now the bad news: For those who like to cut things down to the bare bones, that&#8217;s it. You can&#8217;t dissect the DVWP any further.Now the good news: For those who think that this would be great starting point to build something new, read on. In this post I&#8217;m going to show you my way of driving the Ferrari. Of course this is not the only way, so feel free to do something completely different&#8230; and give me your success stories.First let&#8217;s ask ourselves some question:What are we going to build?Which technologies are we going to use?How to effectively use our Ferrari in that scenario?Answer to Q1: Let&#8217;s build a new version of the Metro style menu web part, that was initially build by Peter Collins. Hey Rainer, why would you do that? It&#8217;s already build, isn&#8217;t it? Yeah, you&#8217;re right, but we are going to add some visual effects and some configuration options to the picture, which wasn&#8217;t in the first version. Simply think of our version as V2.0.Answer to Q2: A Ferrari needs to be driven in adequate places like the N&#252;rburgring in Germany, so let&#8217;s try to find a technology stack that can cope with that ideal ;-).Technologies:Accessing SharePoint data: DVWP in ferrari modeProviding a modern HTML5/CSS3/JavaScript Framework Zurb Foundation 3Metro styled live tiles by Drew Greenwell MetroJSAlternative for SergoiUI (the metro font) Open Sans CondensedMetro like icons by IconShock Free Metro IconsThe reasoning behind each selection is simple: I like them. I know that there are alternatives at each level, but as said earlier it&#8217;s your decision entirely&#8230; when you build your solution. Now without further hesitation lets present two screenshots of the live demo. Thanks to some feedback I got on twitter from Marc D Anderson the second screenshot shows an optimized version for iPhones.Source, LiveI encourage you to take a look at the live version first to see the live tiles in action. All kudos to Drew Greenwell&#8217;s MetroJS project.Now let&#8217;s dive a little deeper into the code by looking at the Source. As you can see it&#8217;s almost the same minimal HTML5 that was introduced last time, enhanced by the files required by Zurb Foundation 3 and MetroJS.Somewhere in the middle you see this div &lt;div id=&quot;metroTiles&quot;&gt;...&lt;/div&gt;, where the DVWP is instantiated. If you are looking very closely, you spot some differences from where we left it last time. This time the web part properties are stripped down to the bare minimum and by using &lt;XslLink&gt;XSLT/ListsAsTiles.xslt&lt;/XslLink&gt; we are allowed to store the XSLT in an external file. As in the Peter Collin&#8217;s version the DataSourceMode is set to ListOfLists in which the server returns information about all lists/libraries of the current site. 1     &lt;div id=&quot;metroTiles&quot; class=&quot;twelve columns tiles&quot;&gt; 2         &lt;!-- DVWP with DataSourceMode=&quot;ListOfLists&quot; --&gt; 3         &lt;WebPartPages:DataFormWebPart runat=&quot;server&quot; AsyncRefresh=&quot;False&quot; FrameType=&quot;None&quot; SuppressWebPartChrome=&quot;True&quot;&gt; 4             &lt;ParameterBindings&gt;&lt;/ParameterBindings&gt; 5             &lt;DataFields&gt;&lt;/DataFields&gt; 6             &lt;XslLink&gt;XSLT/ListsAsTiles.xslt&lt;/XslLink&gt; 7             &lt;Xsl&gt;&lt;/Xsl&gt; 8             &lt;DataSources&gt; 9                 &lt;SharePoint:SPDataSource runat=&quot;server&quot; DataSourceMode=&quot;ListOfLists&quot; SelectCommand=&quot;&quot;10                                          ID=&quot;dsLists&quot;&gt;&lt;/SharePoint:SPDataSource&gt;11             &lt;/DataSources&gt;12         &lt;/WebPartPages:DataFormWebPart&gt;13         &lt;!-- DVWP with DataSourceMode=&quot;ListOfLists&quot; --&gt;14     &lt;/div&gt;I&#8217;m not going to talk about the Zurb Foundation 3 specific configurations here (sass and compass based), but from my first impression I can say at least so much: &#8221;It&#8217;s hot! Real hot!&#8221;. A quantum leap compared to other prominent HTML5 frameworks. Don&#8217;t take my word on it, check it out on your own and let me know what you think.Answer to Q3: This one is pretty short: Know your XSLT.Checkpoint: Up till now you should have a rough understanding how the various pieces of the solution fits together. While it&#8217;s certainly not rocket science it&#8217;s nothing for beginners either. But now we are coming to the heart of the solution. We have to fine tune the Ferrari, so that it can deliver its best performance. You asked for it, so here it is:A word of warning: I don&#8217;t want to waste your time, so there&#8217;s no need to read on, if you most likely never work with XSLT at all.XSLT deep diveXSLT might not be everybody&#8217;s darling, but let&#8217;s face it, you can do a lot of smart things in SharePoint with it that otherwise would require either third party tools or custom .Net development.You have access to the complete XSLT at .com/RainerAtSpirit/ZurbMeetsMetroJS/blob/master/XSLT/ListsAsTiles.xslt'>github and I&#8217;m going to provide some background information about the various pieces below. Of course that code only reflects my coding style. If you pick up one or another XSLT trick that you find useful, good. If not, there&#8217;s certainly more than one way to skin a cat, so I&#8217;d glad to hear from you about you&#8217;re tackling things instead.BTW before you ask: My favorite book ever on that topic is Jenni Tennison&#8217;s .amazon.com/XSLT-XPath-Unlimited-Professional-Mindware/dp/0764547763'>XSLT and XPath On the edge.With that here&#8217;s what makes the Ferrari engine tick. After the usual &lt;xsl:stylesheet ..&gt; declaration we start by defining a $Rows variable. It&#8217;s used to filter out list/libaries that you don&#8217;t want to render e.g. like those with (@__spHidden = &#39;True&#39; and &#8230;1 &lt;xsl:variable name=&quot;Rows&quot; select=&quot;/dsQueryResponse/Rows/Row[not(@__spHidden = &#39;True&#39;) and not(contains2 (@__spDefaultViewUrl, &#39;_catalogs&#39;)) and @__spTitle != &#39;ServiceFiles&#39;]&quot;/&gt;One goal for the solution was to make it configurable. One of the easiest way to accomplish that is by defining a variable and access it via msxsl:node-set($VariableName). Here I&#8217;m using the global element to store global configuration options and tiles to store configuration options based on the BaseTemplate e.g. Contacts, DocumentLibrary and so on. As you can see there are options for color and icon, which control the visual appearance, but also options like data-mode and data-direction that will be used by MetroJS to provide the slide and flip animations.In a fully fledged solution you&#8217;d store those somewhere externally and then bring them in either via Linked Data source, cookies, querystrings etc. 1 &lt;!-- configMap allows configuration per BaseTemplate --&gt; 2 &lt;xsl:variable name=&quot;configMap&quot;&gt; 3     &lt;global&gt; 4         &lt;maxTiles&gt;12&lt;/maxTiles&gt; 5         &lt;wideTiles&gt;3&lt;/wideTiles&gt; 6         &lt;backTileTitle&gt;Last updated&lt;/backTileTitle&gt; 7     &lt;/global&gt; 8     &lt;tiles&gt; 9         &lt;item BaseTemplate=&quot;Contacts&quot; color=&quot;lime&quot; icon=&quot;images/48/bomb.png&quot;/&gt;10         &lt;item BaseTemplate=&quot;DocumentLibrary&quot; color=&quot;teal&quot; icon=&quot;images/48/file.png&quot; data-mode=&quot;slide&quot;11               data-direction=&quot;vertical&quot;/&gt;12         &lt;item BaseTemplate=&quot;GenericList&quot; color=&quot;green&quot; icon=&quot;images/48/inventory2.png&quot; data-mode=&quot;flip&quot;13               data-direction=&quot;vertical&quot;/&gt;14         &lt;item BaseTemplate=&quot;Tasks&quot; color=&quot;red&quot; icon=&quot;images/48/bomb.png&quot; data-mode=&quot;flip&quot;15               data-direction=&quot;horizontal&quot;/&gt;16         &lt;item BaseTemplate=&quot;GanttTasks&quot; color=&quot;purple&quot; icon=&quot;images/48/hand_thumbsup.png&quot;/&gt;17         &lt;item BaseTemplate=&quot;IssueTracking&quot; color=&quot;pink&quot; icon=&quot;images/48/clipboard.png&quot; data-mode=&quot;slide&quot;18               data-direction=&quot;vertical&quot;/&gt;19         &lt;item BaseTemplate=&quot;Links&quot; color=&quot;lime&quot; icon=&quot;images/48/link.png&quot;/&gt;20         &lt;item BaseTemplate=&quot;WebPageLibrary&quot; color=&quot;brown&quot; icon=&quot;images/48/clipboard.png&quot;/&gt;21         &lt;item BaseTemplate=&quot;Events&quot; color=&quot;mango&quot; icon=&quot;images/48/clipboard.png&quot;/&gt;22         &lt;item BaseTemplate=&quot;unknown&quot; color=&quot;blue&quot; icon=&quot;images/48/smiley_sad.png&quot;/&gt;23     &lt;/tiles&gt;24 &lt;/xsl:variable&gt;25 26 &lt;!-- shortcuts to globalConfig and tilesConfig --&gt;27 &lt;xsl:variable name=&quot;globalConfig&quot; select=&quot;msxsl:node-set($configMap)/global&quot;/&gt;28 &lt;xsl:variable name=&quot;tilesConfig&quot; select=&quot;msxsl:node-set($configMap)/tiles&quot;/&gt;The next variable $itemInList stores a result set that it sorted descending by @__spItemCount. This in combination with $globalConfig/wideTiles will be used to show wide tiles based on the number of items in a given list or library e.g. $wideTiles = 3 would show the 3 lists with the most items as wide tile.1 &lt;!-- itemsInList sorted by @__spItemCount descending. Used to distinguish between normal and wide tiles  --&gt;2 &lt;xsl:variable name=&quot;itemsInList&quot;&gt;3     &lt;xsl:for-each select=&quot;$Rows&quot;&gt;4         &lt;xsl:sort select=&quot;@__spItemCount&quot; order=&quot;descending&quot; data-type=&quot;number&quot;/&gt;5         &lt;item id=&quot;{@__spID}&quot; count=&quot;{@__spItemCount}&quot; pos=&quot;{position()}&quot;/&gt;6     &lt;/xsl:for-each&gt;7 &lt;/xsl:variable&gt;The above variables are all globally defined, so they can be accessed throughout the code in every template. Next comes the root template and you can see that the result set is sorted by a heavy XPath expression. All we want to do here is having the lists/libraries sorted by the time they were last modified, but unfortunately the system buries the only reliable UTC date somewhere down in the @__spPropertiesXml attribute. I leave it up to you to digest this XPath and figure out what it&#8217;s exactly doing.By checking &lt;xsl:if test=&quot;position() &amp;lt;= $globalConfig/maxTiles&quot;&gt; before we call the Tile template we restrict the number of rendered tiles to whatever is configured, nothing fancy here. 1 &lt;xsl:template match=&quot;/&quot;&gt; 2     &lt;xsl:for-each select=&quot;$Rows&quot;&gt; 3         &lt;!-- This complex sort criteria is required because __spModified is localized. Using information inside __spPropertiesXml instead --&gt; 4         &lt;xsl:sort 5                 select=&quot;translate(substring-before(substring-after(@__spPropertiesXml, &#39;Modified=&amp;quot;&#39;), &#39;&amp;quot; LastDeleted&#39;), &#39; :&#39;, &#39;&#39;)&quot; 6                 order=&quot;descending&quot; data-type=&quot;number&quot;/&gt; 7         &lt;xsl:if test=&quot;position() &amp;lt;= $globalConfig/maxTiles&quot;&gt; 8             &lt;xsl:call-template name=&quot;Tile&quot;/&gt; 9         &lt;/xsl:if&gt;10     &lt;/xsl:for-each&gt;11 &lt;/xsl:template&gt;The Tile template is responsible for building up the tile html, but as you can see this is divided into multiple separate templates. I simply follow common sense here that mixing structure and logic will become unmaintainable very soon. So we build up a helper variable $t using the MetaData template (logic), which is passed to the TileTemplate (html). Think of this template as your dispenser: logic -&gt; left, structure -&gt;right. 1 &lt;xsl:template name=&quot;Tile&quot;&gt; 2     &lt;!-- Mashup of $configMap and $ itemsInList for the current item --&gt; 3     &lt;xsl:variable name=&quot;coreMetaData&quot;&gt; 4         &lt;xsl:call-template name=&quot;MetaData&quot;&gt; 5             &lt;xsl:with-param name=&quot;baseTemplate&quot; select=&quot;@__spBaseTemplate&quot;/&gt; 6             &lt;xsl:with-param name=&quot;spID&quot; select=&quot;@__spID&quot;/&gt; 7             &lt;xsl:with-param name=&quot;spPropertiesXml&quot; select=&quot;@__spPropertiesXml&quot;/&gt; 8         &lt;/xsl:call-template&gt; 9     &lt;/xsl:variable&gt;10     &lt;!-- shortcut for accessing $coreMetaData --&gt;11     &lt;xsl:variable name=&quot;t&quot; select=&quot;msxsl:node-set($coreMetaData)&quot;/&gt;12 13     &lt;xsl:call-template name=&quot;TileTemplate&quot;&gt;14         &lt;xsl:with-param name=&quot;t&quot; select=&quot;$t&quot; /&gt;15     &lt;/xsl:call-template&gt;16 &lt;/xsl:template&gt;Alright prime time; we are building the required html that represents one tile. We start by copying the tile html from the MetroJS page. There are multipe variable that you can access here.$Rows attributes can be accessed directly e.g. &lt;xsl:value-of select=&quot;@__spItemCount&quot;/&gt; or data-target=&quot;{@__spDefaultViewUrl}&quot;.Meta data can be accessed through $t with the same ease as e.g.  &lt;div class=&quot;live-tile{$t/item/@color} {$t/size}&quot; or &lt;img src=&quot;{$t/item/@icon}&quot; class=&quot;micon&quot;/&gt;.You&#8217;ve access to everything that was globally defined like e.g $globalConfig. 1 &lt;xsl:template name=&quot;TileTemplate&quot;&gt; 2     &lt;xsl:param name=&quot;t&quot; /&gt; 3     &lt;div class=&quot;live-tile {$t/item/@color} {$t/size}&quot; 4          data-stops=&quot;100%&quot; 5          data-speed=&quot;750&quot; 6          data-delay=&quot;-1&quot; 7          data-mode=&quot;{$t/item/@data-mode}&quot; 8          data-direction=&quot;{$t/item/@data-direction}&quot; 9          data-target=&quot;{@__spDefaultViewUrl}&quot;10          data-baseTemplate=&quot;{@__spBaseTemplate}&quot;&gt;11         &lt;span class=&quot;tile-title&quot;&gt;12             &lt;xsl:value-of select=&quot;@__spTitle&quot;/&gt;13             &lt;span class=&quot;badge right&quot;&gt;14                 &lt;xsl:value-of select=&quot;@__spItemCount&quot;/&gt;15             &lt;/span&gt;16         &lt;/span&gt;17         &lt;div&gt;18             &lt;img src=&quot;{$t/item/@icon}&quot; class=&quot;micon&quot;/&gt;19         &lt;/div&gt;20         &lt;div&gt;21             &lt;h3&gt;22                &lt;xsl:value-of select=&quot;$globalConfig/backTileTitle&quot; /&gt;23             &lt;/h3&gt;24             &lt;span class=&quot;prettyDate&quot; title=&quot;{$t/prettyDate}&quot;&gt;25                 &lt;xsl:value-of select=&quot;$t/prettyDate&quot;/&gt;26             &lt;/span&gt;27         &lt;/div&gt;28     &lt;/div&gt;29 &lt;/xsl:template&gt;The last template builds a mashup based on the current item&#8217;s $tilesConfig. Think of it as multiple tables that are joined by some common keys e.g.  $tilesConfig/item[@BaseTemplate = $baseTemplate]. Here we use the @__spBaseTemplate attribute of the current Row, which was passed in as baseTemplate param as the join criteria for $tilesConfig/item/@BaseTemplate. If there&#8217;s a match we make a copy of the matched $tilesConfig/item if not we copy $tilesConfig/item[@BaseTemplate = &#39;unknown&#39;] instead.Everything that needs to be calculated like &lt;size&gt; and &lt;prettyDate&gt; goes in this template as well. If the logic for a given calculation would become to complex you should factor it out of course. 1 &lt;xsl:template name=&quot;MetaData&quot;&gt; 2     &lt;xsl:param name=&quot;spID&quot;/&gt; 3     &lt;xsl:param name=&quot;baseTemplate&quot;/&gt; 4     &lt;xsl:param name=&quot;spPropertiesXml&quot;/&gt; 5     &lt;!-- accessible via $t/item/@XXXX. Available attributes see $configMap/tiles/item/@XXXX --&gt; 6     &lt;xsl:choose&gt; 7         &lt;xsl:when test=&quot;$tilesConfig/item[@BaseTemplate = $baseTemplate]&quot;&gt; 8             &lt;xsl:copy-of select=&quot;$tilesConfig/item[@BaseTemplate = $baseTemplate]&quot;/&gt; 9         &lt;/xsl:when&gt;10         &lt;xsl:otherwise&gt;11             &lt;xsl:copy-of select=&quot;$tilesConfig/item[@BaseTemplate = &#39;unknown&#39;]&quot;/&gt;12         &lt;/xsl:otherwise&gt;13     &lt;/xsl:choose&gt;14     &lt;!-- accessible via $t/size --&gt;15     &lt;size&gt;16         &lt;xsl:choose&gt;17             &lt;xsl:when test=&quot;msxsl:node-set($itemsInList)/item[@id = $spID]/@pos &amp;lt;= $globalConfig/wideTiles&quot;&gt;18                 &lt;xsl:text&gt;wide&lt;/xsl:text&gt;19             &lt;/xsl:when&gt;20             &lt;xsl:otherwise/&gt;21         &lt;/xsl:choose&gt;22     &lt;/size&gt;23     &lt;prettyDate&gt;24         &lt;xsl:variable name=&quot;DateRaw&quot;25                       select=&quot;translate(substring-before(substring-after($spPropertiesXml, &#39;Modified=&amp;quot;&#39;), &#39;&amp;quot; LastDeleted&#39;), &#39; &#39;, &#39;T&#39;)&quot;/&gt;26         &lt;xsl:value-of27                 select=&quot;concat(substring($DateRaw, 1, 4), &#39;-&#39;, substring($DateRaw, 5, 2), &#39;-&#39;, substring($DateRaw, 7,2), substring($DateRaw, 9), &#39;Z&#39;)&quot;/&gt;28     &lt;/prettyDate&gt;29 &lt;/xsl:template&gt;That&#8217;s it, you made it. You&#8217;ve seen how to build a modern HTML5/CSS3/JavaScript solution in SharePoint 2007/2010/(2013?) using the good old DVWP. And you know that at its core it&#8217;s powered by 134 lines of XSLT.As always feedback welcome and bye for now."},
{
"title" : "SharePoint DVWP: from workhorse to Ferrari in 7 steps",
"url" : "/2012/07/15/sharepoint-dvwp-from-workhorse-to-ferrari-in-7-steps","date" :
"15 Jul 2012",
"content" : "This is going to be intense and this is going to be fun&#8230;, if you are willing to follow till the end. I&#8217;m going to take the good old Data Form Web Part, better known as DVWP, and turn the standard HTML, which is delivered by this reliable workhorse, in some highly optimized HTML5 code: I call it the Ferrari version.But before we even start, here are some prerequisites:you worked with the DVWP beforeyou&#8217;re familiar with XML/XSLTyou know who Marc D Anderson is and know his posts about the DVWP inside outyou are familiar with SharePoint Designer, but you are not afraid using a text editor. Notepad will do, but some kind of syntax checking and highlighting would be beneficial. Before you ask: I&#8217;m using WebStorm for overall web development and Altova XML Spy for complex XML/XSLT.Let&#8217;s get started with something the DVWP was build for:accessing data via a data source(just to recap: Database, SOAP, REST, XML Files and Linked Data source are supported)converting the data using XSLTand finally display the result as part of a SharePoint page.Go ahead and:create a new site using the blank site templatecreate a document library called servicefiles that is used to store our pagescreate a subfolder servicefiles/xmland finally create a helloworld.xml file with the following content1 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;2 &lt;root&gt;3 	&lt;title&gt;Hello World&lt;/title&gt;4 &lt;/root&gt;Nothing fancy so far, so let&#8217;s move on:Let&#8217;s created a XML data source for this filecreate a web part page called WebPartPage.aspxPlace a DVWP on it show us the standard content.Checkpoint: As said, I assume that you know the DVWP inside out. But if not or you&#8217;d prefer not following along right now, don&#8217;t worry. Each of the steps below can be accessed online, so sit back, relax and enjoy the ride. If you wanna get your hands dirty later, you find the source code at github.Ok, let&#8217;s move on. By default SPD uses some baked in XSLT to perform the XML/XSLT conversion, which is clearly not the best starting point for us, so let&#8217;s replace the xsl:stylesheet by our own.1 &lt;xsl:stylesheet version=&quot;1.0&quot; exclude-result-prefixes=&quot;xsl msxsl ddwrt&quot; xmlns:ddwrt=&quot;http://schemas.microsoft.com/WebParts/v2/DataView/runtime&quot; xmlns:asp=&quot;http://schemas.microsoft.com/ASPNET/20&quot; xmlns:__designer=&quot;http://schemas.microsoft.com/WebParts/v2/DataView/designer&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; xmlns:msxsl=&quot;urn:schemas-microsoft-com:xslt&quot; xmlns:SharePoint=&quot;Microsoft.SharePoint.WebControls&quot; xmlns:ddwrt2=&quot;urn:frontpage:internal&quot;&gt;2     &lt;xsl:output method=&quot;html&quot; indent=&quot;no&quot;/&gt;3     &lt;xsl:template match=&quot;/&quot; xmlns:asp=&quot;http://schemas.microsoft.com/ASPNET/20&quot; xmlns:__designer=&quot;http://schemas.microsoft.com/WebParts/v2/DataView/designer&quot; xmlns:SharePoint=&quot;Microsoft.SharePoint.WebControls&quot;&gt;4         &lt;h1&gt;&lt;xsl:value-of select=&quot;root/title&quot; /&gt;&lt;/h1&gt;5     &lt;/xsl:template&gt;6 &lt;/xsl:stylesheet&gt;Assuming nothing went wrong, you should see something like this in your browser.For your convenience you have access to the .com/RainerAtSpirit/DVWP-HTML5/blob/master/WebPartPage.aspx'>Source, see the rendered result .de/demos/gtk/dvwp/ServiceFiles/WebPartPage.aspx'>Live and what&#8217;s more important you can see the HTML source of that page; and yes, right click on the rendered result, view source will work as well.The size of HTML source will act as our baseline, and a quick look reveals that there are 772 lines of code, which includes our payload of &lt;h1&gt;Hello world&lt;/h1&gt;. You can see that our payload is nicely integrated into a fully-fledged SharePoint theme. As said above this scenario is exactly, what the DVWP was built for.Checkpoint In a series of small step-by-step modifications this starting point now undergoes optimization, with the goal of creating a slick HTML5 version that uses the same payload.Ready?321go&#8230;Step 1 Create an empty aspx page in the same folder (hint: right click is your friend) call it step_1.aspx and copy/paste the existing DVWP from WebPartPage.aspx into it.Source, Live, HTML sourceBy placing the DVWP onto it&#8217;s own empty aspx page we a) removed almost all visible SharePoint chrome and b) reduced the HTML source size to 160 lines. Make a copy of the current page (step_1.aspx) and save as next page (step_2 .aspx); repeat the same process for the following steps.Step 2 Getting rid of the Web part properties bar is straight forward and frankly could have been done in our original page as well. Simply open the web part properties and change the Chrome Type to none, which will bring us down to 154 lines.Source, Live, HTML sourceStep 3 After that easy passage in step 2 let&#8217;s get a little bit more aggressive by getting rid of the asp:ScriptManager tag. You can either delete it in the code view or in design view. If the latter, make sure that you&#8217;ve turned on Visual Aids otherwise you won&#8217;t see it.You should test this modification immediately in the browser and you&#8217;ll see this error message.Source, LiveHow comes? The page looks still good in SPD, doesn&#8217;t it? Somehow the web part seems to have a dependency on the asp:ScriptManager that only shows up in the browser. Being at this point before, you remember that the ScriptManager is responsible for loading all kind of JavaScript files, some of them Async in nature. So by carefully exploring the DVWP settings, you come across the following AsyncRefresh=True property. Modifying this to AsyncRefresh=False will ensure that the error message goes away and brings the html down to 124 lines.Source, Live, HTML sourceCheckpoint Up till now we&#8217;ve used SPD to make modifications, but from this point on SPD is no longer your best friend for dealing with the DVWP. This is not the fault of SPD though; we are simply driving the DVWP behind the point that&#8217;s supported inside SPD. Therefore I&#8217;d suggest that you now grab your favorite XML/XSLT HTML editor and make further modifications directly in the source code.One additional warning By making modifications beyond this point, you will no longer be able to save your site as a site template and create new sites from it, at least not reliable. Most of the time this is not an issue, remember we are going to build a Ferrari and you probably just need one not thousands ;-). But if there&#8217;s ever a need to move your Ferrari around, you can still manually copy the aspx pages or turn them into a Visual studio feature.Step 4 Looking at the source code of the result in step 3 will immediately trigger our attention to the next optimization target. There is that huge input that hosts the viewstate. All nice and well if you are doing server side stuff, but we don&#8217;t want that, so simply remove the &lt;form ...&gt;and &lt;/forms&gt; tags in the source.Yeah, I know that might sound a little bit drastic, but give it a try before you judge; and you&#8217;ll be rewarded by seeing the HTML source cutting down to 51 lines.Source, Live, HTML sourceStep 5 Let&#8217;s see if we can still use some SharePoint controls at the server side after our drastic step 4; and in addition let&#8217;s cleanup the current header.change the static title to a dynamic one (see below)update the doctype &lt;!DOCTYPE html&gt; and &lt;html&gt; tagremove existing &lt;style&gt; tag1 &lt;title&gt;&lt;SharePoint:ListItemProperty Property=&quot;BaseName&quot; maxlength=&quot;40&quot; runat=&quot;server&quot;/&gt;&lt;/title&gt;`As you can see below the &lt;title&gt; information is correctly showing the current&#8217;s page name; and by cleaning up we are down to 20 lines.Source, Live, HTML sourceStep 6 Now have a look at the HTML5 source after all the optimization. Not too bad I&#8217;d say, but still there&#8217;s room for improvement. See the highlighted namespaces in the payload. This will be our next target.Truth told, we might have tackled those namespaces earlier, but now that our HTML becomes smaller, it is far easier to spot that they are not required.This one is pretty straight forward, just modify the XSLT slightly. Here&#8217;s the reformatted version that defines all exclude-result-prefixes correctly and removes the namespaces in &lt;xsl:template match=&quot;/&quot;. 1 &lt;xsl:stylesheet version=&quot;1.0&quot; 2 exclude-result-prefixes=&quot;ddwrt asp __designer xsl msxsl SharePoint ddwrt2&quot; 3 xmlns:ddwrt=&quot;http://schemas.microsoft.com/WebParts/v2/DataView/runtime&quot; 4 xmlns:asp=&quot;http://schemas.microsoft.com/ASPNET/20&quot; 5 xmlns:__designer=&quot;http://schemas.microsoft.com/WebParts/v2/DataView/designer&quot; 6 xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; 7 xmlns:msxsl=&quot;urn:schemas-microsoft-com:xslt&quot; 8 xmlns:SharePoint=&quot;Microsoft.SharePoint.WebControls&quot; 9 xmlns:ddwrt2=&quot;urn:frontpage:internal&quot;&gt;10     &lt;xsl:output method=&quot;html&quot; indent=&quot;no&quot;/&gt;11     &lt;xsl:template match=&quot;/&quot;&gt;12         &lt;h1&gt;&lt;xsl:value-of select=&quot;root/title&quot; /&gt;&lt;/h1&gt;13     &lt;/xsl:template&gt;14 &lt;/xsl:stylesheet&gt;Source, Live, HTML sourceStep 7 Not much room for optimization left, correct? But there&#8217;s one thing that annoys me most, when looking at the current state of things. Take a look at our XSLT stylesheet above, there&#8217;s clearly NO &lt;table class&quot;....&gt;&lt;/table&gt; in there, this code is injected by the DVWP instead.The not that well known property SuppressWebPartChrome (see MSDN) will help us getting rid of this extra WebPartChrome. Please note that this only works if the DVWP lives outside a web part zone, so you can&#8217;t use this for standard implemenations like our initial WebPartPage.aspx.You reach the finishing line by adding SuppressWebPartChrome=&quot;True&quot; to the web part properties, which brings us to16 lines of clean HTML5 code or The Ferrari versionSource, Live, HTML sourceBoy, that was probably just another TL;DR, but if you made it till here, you might have picked up one or two things about the DVWP that you&#8217;d consider &#8216;Good to know&#8217;.I&#8217;d be glad to hear from you about the experiences you make, while testing this out.BTW if you are looking for inspiration, where to go from here, take a look at this Metro demo, which is a HTML5 client app that was build using two DVWPs&#8230;, but&#8217;s that&#8217;s worth another story, so stay tuned! Live"},
{
"title" : "Metro JavaScript App - strongly typed?",
"url" : "/2012/07/13/metro-javascript-app---strongly-typed","date" :
"13 Jul 2012",
"content" : "Let&#8217;s face it, even when I choose to build Metro style apps with HTML5, JavaScript and CSS because I love the dynamic nature of this environment, there are times when I&#8217;m a little bit jealous of that strong typed stuff that you get in that boring C#/XAML world ;-).Let see if we can take an existing application like Jeremy Foster&#8217;s excellent A Metro Netflix browser in HTML/JS - The Hub page, add some magic (JayData) to it and see if that helps reducing my jealousy .Start by downloading Jeremy&#8217;s code that is attached to the blog. While on it don&#8217;t miss to download and install Fiddler 4 and the Windows 8 AppContainer Loopback Utility.Simply follow the Jeremy&#8217;s instructions, fire up fiddler and run the code.Checkpoint: Make sure that you see some titles coming back from Netflix. Looking at fiddler you should see something like the above. Notice the response size of about 740K. At the moment we are not leveraging OData to its full extend. I know that if you&#8217;re an OData expert you already spoted a way to reduce the response by using server side projection. But wait, maybe there are others that aren&#8217;t experts yet, so we come back to this a little later.Next download the latest version of JayData and JaySvcUtil from the download area. Extract both files into two separate directories, we don&#8217;t want all of them lingering around in our projcect directory, we cherry pick instead the bare minimum.So from the JayData directory add the following files into the project&#8217;s js directoryJayData-vsdoc.jsJayData.jsdatajs-1.0.2.jsOpen up your preferred command line and navigate to the JaySvcUtil directory. JaySvcUtil.exe is command line utility that allows converting OData $metada information into a strongly typed JavaScript object. While it has several switches for fine tuning, we only require three of them.-m $metadata url of your service e.g http://odata.netflix.com/catalog/$metadata-n Namespace e.g. here Netflix-o output file e.g. Netflix.jsRainer@METRORP ~/Downloads/JaySvcUtil$ JaySvcUtil.exe -m &#39;http://odata.netflix.com/catalog/$metadata&#39; -o Netflix.js -n &#39;Netflix&#39;If everything went smoothly the system should have generated your &#8216;Netflix.js&#8217; file. Depending on the complexity of your service you might receive a couple of warning messages, which - most of the time - can safely be ignored. Please add the newly created &#8216;YourOutputFile.js&#8217; to the project&#8217;s js directory as well.Your default.html should now look like this: 1 &lt;!DOCTYPE html&gt; 2 &lt;html&gt; 3 &lt;head&gt; 4     &lt;meta charset=&quot;utf-8&quot; /&gt; 5     &lt;title&gt;NetflixBrowser&lt;/title&gt; 6  7     &lt;!-- WinJS references --&gt; 8     &lt;link href=&quot;//Microsoft.WinJS.1.0.RC/css/ui-dark.css&quot; rel=&quot;stylesheet&quot; /&gt; 9     &lt;script src=&quot;//Microsoft.WinJS.1.0.RC/js/base.js&quot;&gt;&lt;/script&gt;10     &lt;script src=&quot;//Microsoft.WinJS.1.0.RC/js/ui.js&quot;&gt;&lt;/script&gt;11 12     &lt;!-- NetflixBrowser references --&gt;13     &lt;link href=&quot;/css/default.css&quot; rel=&quot;stylesheet&quot; /&gt;14     &lt;script src=&quot;/js/default.js&quot;&gt;&lt;/script&gt;15     &lt;script src=&quot;/js/navigator.js&quot;&gt;&lt;/script&gt;16 17     &lt;!-- JayData references --&gt;18     &lt;script src=&quot;/js/datajs-1.0.2.js&quot;&gt;&lt;/script&gt;19     &lt;script src=&quot;/js/JayData.js&quot;&gt;&lt;/script&gt;20     &lt;script src=&quot;/js/netflix.js&quot;&gt;&lt;/script&gt;21 22 &lt;/head&gt;23 &lt;body&gt;24     &lt;div id=&quot;contenthost&quot; data-win-control=&quot;Application.PageControlNavigator&quot; data-win-options=&quot;{home: &#39;/pages/home/home.html&#39;}&quot;&gt;&lt;/div&gt;25     &lt;!-- &lt;div id=&quot;appbar&quot; data-win-control=&quot;WinJS.UI.AppBar&quot;&gt;26         &lt;button data-win-control=&quot;WinJS.UI.AppBarCommand&quot; data-win-options=&quot;{id:&#39;cmd&#39;, label:&#39;Command&#39;, icon:&#39;placeholder&#39;}&quot;&gt;&lt;/button&gt;27     &lt;/div&gt; --&gt;28 &lt;/body&gt;29 &lt;/html&gt;Checkpoint: Run the app just to see if all files can be loaded and no error occurs. While doing that in my case Visual studio was complaining about some errors in Netflix.js and right so. You can see that there are a couple of mistyped ..., params : , ... in the code begining at line 166. If that the case for you as well go ahead and remove them. Not quite sure if that&#8217;s Netflix or an JayData issue, but it&#8217;s reported to JayData.Alright almost done with the setup phase. Let&#8217;s open up js/home.js andget rid of the current WinJS.xhr calladd some references to the JayData files to get Intellisense support.You&#8217;re home.js should look like below. Remember that you need to compile once to get Intellisense picking up the changes. 1 /// &lt;reference path=&quot;/js/jaydata.js&quot; /&gt; 2 /// &lt;reference path=&quot;/js/jaydata-vsdoc.js&quot; /&gt; 3 /// &lt;reference path=&quot;/js/netflix.js&quot; /&gt; 4 (function () { 5  &quot;use strict&quot;; 6  7  WinJS.UI.Pages.define(&quot;/pages/home/home.html&quot;, { 8      // This function is called whenever a user navigates to this page. It 9      // populates the page elements with the app&#39;s data.10      ready: function (element, options) {11 12          var titlesListGrouped = new WinJS.Binding.List().createGrouped(13              function (i) { return i.title.charAt(0).toUpperCase(); },14              function (i) { return { firstLetter: i.title.charAt(0).toUpperCase() }; }15          );16 17          var list = q(&quot;#list&quot;).winControl;18          list.itemDataSource = titlesListGrouped.dataSource;19          list.itemTemplate = q(&quot;#template&quot;);20          list.groupDataSource = titlesListGrouped.groups.dataSource;21          list.groupHeaderTemplate = q(&quot;#headertemplate&quot;);22 23      }24  });25 })();Now, roll drum&#8230; here&#8217;s the magic moment :), type in Netflix.context. and you should see Intellisene kicking in. Before we move on let&#8217;s celebrate by leaving the computer and doing whatever you prefer to do when you celebrate.Alright, back to work! Your first goal would be to come up with an equivalent of the original WinJS.xhr call 1 WinJS.xhr({ url: &quot;http://odata.netflix.com/Catalog/Titles?$format=json&amp;$top=200&quot; }) 2     .then(function (xhr) { 3         var titles = JSON.parse(xhr.response).d; 4         titles.forEach(function (i) { 5             titlesListGrouped.push({ 6                 title: i.ShortName, 7                 imageUrl: i.BoxArt.LargeUrl 8             }); 9         });10     });Converting this is pretty straight forward. Netflix.context is already aware of the URL and JayData will add the appropriate Request-Header, so that the Odata service returns Json. That leaves us with teaching the system that we would like to retrieve 200 Titles. By looking at the available methods for Netflix.context.Titles we notice the take()method, which probably sounds familiar to many of you. There are several other methods like include(), filter(), orderBy(), skip(), map() and forEach that are all part of the JavaScript Language Query. If you never heard of any of those or want to learn more about it check them out at (JSLQ) 101 and come back later.The last thing we need to do is reusing the logic of the original forEach loop to push the results into titlesListGrouped.1 Netflix.context.Titles2     .take(200)3     .forEach(function(item) {4         titlesListGrouped.push({5             title: item.title,6             imageUrl: item.BoxArt.LargeUrl7         });8     })Please note that at the time of this writing, while there is an JayData deferred.js adapter available for jQuery there&#8217;s NO WinJS aware adapter&#8230; yet. So at the moment you won&#8217;t be able to create promises and use .then() or .done().Checkpoint: Run the code and make sure that you still see titles coming back from Netflix. Alright how does that feel so far? Without being an OData expert you just conducted an OData query, without leaving the comfort zone of Visual Studio and its Intellisene. Not too shabby I&#8217;d say. But we&#8217;ll take it even a step further and try making our OData request a little bit more precise.Can we do that? Of course we can by leveraging the .map method; and you&#8217;ll see, which benefits that brings in just a moment. Please note that I couldn&#8217;t bring Intellisense to show available properties for item, but when you look at the Json returned by the service in Fiddler, you can see that we map title: item.ShortName and BoxArt: item.BoxArt and return that as an anonymous object. So in the forEach loop we access those as item.title and item.BoxArt. 1 Netflix.context.Titles 2     .map(function(item) { 3         return { 4             title: item.ShortName, 5             BoxArt: item.BoxArt 6         }; 7     }) 8     .take(200) 9     .forEach(function(item) {10         titlesListGrouped.push({11             title: item.title,12             imageUrl: item.BoxArt.LargeUrl13         });14     }) If you are now running the application and watch Fiddler you see that the return set is way smaller than before. We are down from 740K to about 140K. So by using the strongly typed Netflix object you not only gained the benefit of Intellisense support, you somehow became an OData expert as well ;-). Closer watching the URL in Fiddler reveals that there&#8217;s a new $select=ShortName,BoxArt parameter that was added by JayData, so now the projection is accomplished at the server side and no longer at the client.That&#8217;s it for today and truth told I feel my jealousy about strongly typed C#/XAML fading away and my excitement about JavaScript grow. But everybody&#8217;s different, so here are two choices if you want to move on with Jeremy&#8217;s Metro app:You can get rid of all JayData files you&#8217;ve added and apply the knowledge about the $select parameter to enhance the original WinJS code manually. You will see the same performance benefits that we got here.Just so that you know, there&#8217;s nothing wrong with this approach, really.But maybe you want to stay a little with JayData and see how it pays off.For those of you, who are on the fence line, it might be good to know that JayData supports a couple of other formats that can be all accessed using the same JSQL you started getting familiar with.Facebook Query Language, SqlLite, Yahoo Open Data Tables, InMemoryDB, WebSQL, IndexedDband there are more in the pipelineI&#8217;d be glad to hear from you about your decission and the reasoning behind it.PS: For the impatient ones that wants to start immediately with JayData version of Jeremy&#8217;s Metro example feel free to clone this repo."},
{
"title" : "Dynamic search in a static world",
"url" : "/2012/07/09/dynamic-search-in-a-static-world","date" :
"09 Jul 2012",
"content" : "While adding search to a new blog might not be the most important thing to do, it gave me perfect excuse to work a little with Jekyll liquid and AngularJS. There was no need to reinvent the wheel as Edward Hotchkiss already implemented something pretty similiar. Therefore here are just the major differences, I expect that you&#8217;re familiar with Edward&#8217;s post, if not please read it first. The implementation is based on AngularJS v1.0.1 and by using a small liquid condition scripts are only loaded on the search page.Here&#8217;s the relevant excerpt from default.html.1 {% if page.title == &#39;Search&#39; %}2     &lt;script type=&quot;text/javascript&quot; src=&quot;http://code.angularjs.org/angular-1.0.1.min.js&quot;&gt;&lt;/script&gt;3     &lt;script type=&quot;text/javascript&quot; src=&quot;/js/JekyllApp.js&quot;&gt;&lt;/script&gt;4 {% endif %}Edward Hotchkiss is making an XHR call to retrieve the RSS-feed feed.xml and then parses the xml. This is a pretty straight forward implementation, but I wanted to omit this extra XHR call and &#8216;bootstrap&#8217; the information into the initial page. Therefore a liquid helper is used to create an JavaScript array with the relevant post information. This has the additional advantage that you can leverage liquid filter like strip_html | truncate : 120  (on the server side!) to clean up and cut down potentially large information.One goal was to having a search box on every page. The Controller was enhanced so that the $scope.searchText = &#39;&#39; can now be passed in via querystring as well.BTW: You can give it a try on all blog pages, to see it in action. 1 /** 2  * Setup Module with `highlight` filter 3  */ 4  5 var JekyllApp = angular.module(&#39;JekyllApp&#39;, [], function ($routeProvider, $locationProvider) { 6     $locationProvider.html5Mode(false); 7 }); 8  9 JekyllApp.filter(&#39;highlight&#39;, function () {10     return function (text, filter) {11         if (filter === &#39;&#39;) {12             return text;13         }14         else {15             return text.replace(new RegExp(filter, &#39;gi&#39;), &#39;&lt;span class=&quot;match&quot;&gt;$&amp;&lt;/span&gt;&#39;);16         }17     };18 });19 20 /**21  * Inject required $objects into our Controller22  */23 24 JekyllSearchController.$inject = [&#39;$scope&#39;, &#39;$location&#39;, &#39;$window&#39;];25 26 function JekyllSearchController($scope, $location, $window) {27     // Optionally passing in a search term via q=XXX28     // $location.search won&#39;t work without html5Mode false using window.location.search instead29     // $scope.searchText =  $location.search().q || &quot;&quot;;30     // Todo: Consider switching back to $location.search once it supports html5Mode false31     $scope.searchText = &#39;&#39;;32     var search = window.location.search;33     if (search.indexOf(&#39;?q=&#39;) &gt; -1 || search.indexOf(&#39;&amp;q=&#39;) &gt; -1) {34         var params = {};35         angular.forEach(search.split(&#39;?&#39;)[1].split(&#39;&amp;&#39;), function (param) {36             params[param.split(&#39;=&#39;)[0]] = param.split(&#39;=&#39;)[1];37         });38         $scope.searchText = params.q || &#39;&#39;;39     }40 41     $scope.externalLink = function () {42         // Todo: Figure out the correct AngularJS way for a page reload on href click43         // https://github.com/angular/angular.js/issues/110244         $window.location.href = this.post.url;45     };46     $scope.posts = JekyllApp.posts;47 }There are a couple of things that I didn&#8217;t grasp fully at the moment I&#8217;ve to admit, likewhy $location.search() only works with $locationProvider.html5mode(true) orwhy AngularJS doesn&#8217;t have an easy (to discover) method that allows a full page reload on href clickso I&#8217;d be happy if somebody could fill the gaps. In the meantime workarounds are used, so querystring q is determined in a good old fashioned way and there&#8217;s a thread on the angular groups that discusses page reload. 1 &lt;script type=&quot;text/javascript&quot;&gt; 2    // Using liquid to populate JeykllApp.posts array 3    JekyllApp.posts = {% include Helper/JekyllAppPosts %} 4 &lt;/script&gt; 5  6 &lt;div id=&quot;search-container&quot; class=&quot;entrance&quot; ng-app=&quot;JekyllApp&quot; ng-controller=&quot;JekyllSearchController&quot;&gt; 7   &lt;div class=&quot;entrance-item&quot;&gt; 8     &lt;p&gt;&lt;input id=&quot;searchText&quot; type=&quot;search&quot; placeholder=&quot;Live Search Posts...&quot; ng-model-instant ng-model=&quot;searchText&quot; /&gt; 9   &lt;/div&gt;10   &lt;div class=&quot;entrance-item&quot;&gt;11     &lt;ul&gt;12       &lt;li ng-repeat=&quot;post in posts | filter:searchText&quot;&gt;13          &lt;span ng-bind-html-unsafe=&quot;post.date | date:&#39;MMM d, y&#39; | highlight:searchText&quot;&gt;&lt;/span&gt; &amp;raquo;14         &lt;a ng-href=&quot;{{ post.url }}&quot; ng-click=&quot;externalLink()&quot;15            ng-bind-html-unsafe=&quot;post.title | highlight:searchText&quot;&gt;&lt;/a&gt;16           &lt;div class=&quot;preview&quot; ng-bind-html-unsafe=&quot;post.content | highlight:searchText&quot;&gt;&lt;/div&gt;17       &lt;/li&gt;18     &lt;/ul&gt;19   &lt;/div&gt;20 &lt;/div&gt;So where&#8217;s that magic include Helper/JekyllAppPosts coming from? This is where my very first liquid expression :) kicks in and returns an array with title, url, date and content information.1 [{% for post in site.posts %}2 {&quot;title&quot; : &quot;{{ post.title }}&quot;,3 &quot;url&quot; : &quot;{{ post.url }}&quot;,4 &quot;date&quot; : &quot;{{ post.date | date_to_string }}&quot;,5 &quot;content&quot; : &quot;{{ post.content |  strip_html | truncate : 120 }}&quot;}{% if forloop.rindex0 != 0 %},{% endif %}6 {% endfor %}7 ];All in all the implementation was pretty straight forward, even when there were a couple of gotchas.On very last gotcha I run into and that I&#8217;d like to share, is that on my local box jekyll is running with liquid 2.3 whatever, which allows you to use {% raw %}, while github is using liquid 2.2 whatever and therefore the older {% literal %} expression is used. After being hit by that one I finally understood Edward&#8217;s LeftCurley setting in _config.yml and I feel his pain.Anyway as a rule of thumb, don&#8217;t use those tags for the time being and rewrite the code instead. There are some instructions from Khaja Minhajuddin that doesn&#8217;t require plug-ins."},
{
"title" : "WinJS.Namespace.define gotcha",
"url" : "/2012/07/06/winjs--namespace","date" :
"06 Jul 2012",
"content" : "So you are following MS best practice and started namespacing your Metro JavaScript projects nicely already. Good :). Now here&#8217;s the challenge: spot the issue with the following code:Problematic version: using WinJS.Namespace.defineWinJS.Namespace.define(&#39;MyApp&#39;, {    version : &#39;0.0.1&#39;});WinJS.Namespace.define(&#39;Myapp.Helper&#39;, {    think: function(input) {        // do something    }});console.log(typeof MyApp.Helper.think);  // -&gt; 0x800a138f - JavaScript runtime error: Unable to get property &#39;think&#39; ofundefined or null referenceYeah, I know you spotted the mistyped namespace Myapp.Helper immediately. But what if Myapp.Helper would have been defined in another file, maybe by another coder? You might have been suprised a little, at least I was, when first faced with it;-).Better version: using WinJS.Namespace.defineWithParentWinJS.Namespace.define(&#39;MyApp&#39;, {    version : &#39;0.0.1&#39;});WinJS.Namespace.defineWithParent(MyApp, &#39;Helper&#39;, {    think: function (input) {        // do something    }});console.log(typeof MyApp.Helper.think); // -&gt; &quot;function&quot;Using defineWithParent won&#8217;t have that issue as you are passing in the parent object as first parameter, so VS immediately starts yelling if this object doesn&#8217;t exist. Probably worth making a rule like only using define for root namespaces and from that point on using defineWithParent.Love to hear about your experiences with WinJS.Namespace."},
{
"title" : "First steps",
"url" : "/2012/07/05/first-steps","date" :
"05 Jul 2012",
"content" : "The obvious challenge: Where and how to start blogging. The answer: After deciding to use github pages and jekyll to host a static blog this blog here brought me up to speed. I&#8217;m especially glad about finding the_program theme, which provides a great responsive design without looking like &#8216;twitter bootstrap&#8217; at all ;-)."}
]


